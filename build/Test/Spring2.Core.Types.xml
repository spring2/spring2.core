<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spring2.Core.Types</name>
    </assembly>
    <members>
        <member name="T:Spring2.Core.Types.CountryCodeEnumList">
            <summary>
            CountryCodeEnum generic collection
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.CurrencyCodeEnumList">
            <summary>
            CurrencyCodeEnum generic collection
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.CurrencyTypeList">
            <summary>
            CurrencyType generic collection
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.DataType">
            <summary>
            Summary description for DataType.
            </summary>
        </member>
        <member name="M:Spring2.Core.Types.DateTimeType.CompareNoSeconds(Spring2.Core.Types.DateTimeType)">
            <summary>
            Compares dates.  Assumes equal if the difference &lt; 2 minutes, otherwise like normal compare.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Spring2.Core.Types.DateTimeType.ToDate">
            <summary>
            Get the date part only
            </summary>
        </member>
        <member name="P:Spring2.Core.Types.DateTimeType.BeginningOfDay">
            <summary>
            Get the date part only, truncating the time
            </summary>
        </member>
        <member name="P:Spring2.Core.Types.DateTimeType.EndOfDay">
            <summary>
            Get the date with the very last millisecond of the day.
            Matches Sql Server granularity of milliseconds.
            </summary>
        </member>
        <member name="M:Spring2.Core.Types.DateType.ToDate">
            <summary>
            Get the date part only
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.DateTypeList">
            <summary>
            DateType generic collection
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.DateTimeTypeList">
            <summary>
            DateTimeType generic collection
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.DecimalTypeList">
            <summary>
            DecimalType generic collection
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.EnumDataTypeList">
            <summary>
            EnumDataType generic collection
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.Formatter.DataTypeFormatter">
            <summary>
            Summary description for DataTypeFormatter.
            </summary>
        </member>
        <member name="M:Spring2.Core.Types.Formatter.DataTypeFormatter.FormatDefault(Spring2.Core.Types.IDataType)">
            <summary>
            formats a DataType to a string using ToString() or an empty string if not valid
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Spring2.Core.Types.Formatter.DataTypeFormatter.FormatDefault(Spring2.Core.Types.DecimalType,System.String)">
            <summary>
            format a currency type using format string or blank if not valid
            </summary>
            <param name="val"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Spring2.Core.Types.Formatter.DataTypeFormatter.FormatDefault(Spring2.Core.Types.DecimalType,System.String,System.String)">
            <summary>
            format a currency type using format string or return specified string if not valid
            </summary>
            <param name="val"></param>
            <param name="format"></param>
            <param name="stringIfNotValid"></param>
            <returns></returns>
        </member>
        <member name="M:Spring2.Core.Types.Formatter.DataTypeFormatter.FormatDefault(Spring2.Core.Types.IntegerType,System.String)">
            <summary>
            format a currency type using format string or blank if not valid
            </summary>
            <param name="val"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Spring2.Core.Types.Formatter.DataTypeFormatter.FormatDefault(Spring2.Core.Types.DateType,System.String)">
            <summary>
            format a currency type using format string or blank if not valid
            </summary>
            <param name="val"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Spring2.Core.Types.Formatter.DataTypeFormatter.FormatDateDefault(Spring2.Core.Types.DateType)">
            <summary>
            formats a DateType to the short date pattern or an empty string if not valid
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Spring2.Core.Types.Formatter.DataTypeFormatter.FormatTimeDefault(Spring2.Core.Types.DateType)">
            <summary>
            formats a DateType to the short time pattern or an empty string if not valid
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Spring2.Core.Types.Formatter.DataTypeFormatter.TruncateString(System.String,System.Int32)">
            <summary>
            Truncates a given string up to given length
            </summary>
            <param name="val" type="string"></param>
            <param name="length" type="int"></param>
            <returns></returns>
        </member>
        <member name="T:Spring2.Core.Types.IDataType">
            <summary>
            Common interface for all core types
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.IdTypeList">
            <summary>
            IdType generic collection
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.ILanguage">
            <summary>
            ResourceManager is able to operate on instances of ILanguage.
            Use this interface to make your custom language enum compatibile with the resource manager
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.ILocale">
            <summary>
            ResourceManager is able to operate on instances of ILocale.
            Use this interface to make your custom locale compatibile with the resource manager
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.IntegerTypeList">
            <summary>
            IntegerType generic collection
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.LanguageEnumList">
            <summary>
            LanguageEnum generic collection
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.LanguageFactory">
            <summary>
            Summary description for LanguageFactory.
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.LocaleEnumList">
            <summary>
            LocaleEnum generic collection
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.LocaleFactory">
            <summary>
            Summary description for LocaleFactory.
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.PhoneNumberType">
            <summary>
            Data type for wrapping phone numbers. 
            </summary>
        </member>
        <member name="M:Spring2.Core.Types.PhoneNumberType.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            For U.S. phone numbers
            </summary>
            <param name="areaCode"></param>
            <param name="exchange"></param>
            <param name="number"></param>
            <param name="extension"></param>
        </member>
        <member name="M:Spring2.Core.Types.PhoneNumberType.#ctor(System.String,System.String,System.String)">
            <summary>
            International numbers
            </summary>
            <param name="countryCode"></param>
            <param name="number"></param>
            <param name="extension"></param>
        </member>
        <member name="M:Spring2.Core.Types.PhoneNumberType.ToString">
            <summary>
            Uses the App.config 'PhoneNumberDisplayFormat' and 'PhoneNumberExtensionDisplayFormat' settings if they exist
            </summary>
            <returns>Formatted Phone Number String</returns>
        </member>
        <member name="M:Spring2.Core.Types.PhoneNumberType.ToString(System.String)">
            <summary>
            /// <summary>
            0 = Area Code
            1 = Exchange
            2 = Number
            Uses the App.config 'PhoneNumberExtensionDisplayFormat' setting if it exists
            </summary>
            </summary>
            <param name="phoneNumberFormat"></param>
            <returns>Formatted Phone Number string </returns>
        </member>
        <member name="M:Spring2.Core.Types.PhoneNumberType.ToString(System.String,System.String)">
            <summary>
            0 = Area Code
            1 = Exchange
            2 = Number
            0 = Extension
            </summary>
            <param name="phoneNumberFormat"></param>
            <param name="extensionFormat"></param>
            <returns>Formatted Phone Number string</returns>
        </member>
        <member name="M:Spring2.Core.Types.PhoneNumberType.RemoveNonNumeric(Spring2.Core.Types.StringType)">
            <summary>
            Removes all non-numeric digits from a string
            Use this while formatting a phone number to pass into a search function as a string match against PhoneNumberType database data
            </summary>
            <param name="messyString"></param>
            <returns></returns>
        </member>
        <member name="M:Spring2.Core.Types.PhoneNumberType.RemoveNonNumeric(System.String)">
            <summary>
            Removes all non-numeric digits from a string
            </summary>
            <param name="messyString"></param>
            <returns></returns>
        </member>
        <member name="M:Spring2.Core.Types.PhoneNumberType.RemoveNonNumeric(System.String,System.Char[])">
            <summary>
            Removes all non-numeric digits from a string except specified characters
            </summary>
            <param name="messyString"></param>
            <param name="except"></param>
            <returns></returns>
        </member>
        <member name="T:Spring2.Core.Types.RequiredAttribute">
            <summary>
            Indicates that a property value is required to be mapped from the request
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.RowVersionType">
            <summary>
            RowVersion type for the Timestamp values in SQL Server.
            </summary>
            
        </member>
        <member name="P:Spring2.Core.Types.StringType.Length">
            <summary>
            Read only property to get the length of the underlying string.
            Returns -1 if the instance is not valid.
            </summary>
        </member>
        <member name="T:Spring2.Core.Types.StringTypeList">
            <summary>
            StringType generic collection
            </summary>
        </member>
        <member name="M:Spring2.Core.Types.StringTypeList.Sort(System.Collections.IComparer)">
            <summary>
            Sort a list by a column
            </summary>
        </member>
        <member name="M:Spring2.Core.Types.StringTypeList.Sort(System.String)">
            <summary>
            Sort the list given the name of a comparer class.
            </summary>
        </member>
    </members>
</doc>
