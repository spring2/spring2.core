<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spring2.Core.Configuration</name>
    </assembly>
    <members>
        <member name="T:Spring2.Core.Configuration.AppSettingsProvider">
            <summary>
            Summary description for AppSettingsProvider.
            </summary>
        </member>
        <member name="T:Spring2.Core.Configuration.ChainedConfigurationProvider">
            <summary>
            Aggregated configuration provider that uses both AppSettingsProvider and SqlConfigurationProvider.  The 
            settings from AppSettingsProvider override settings found from SqlConfigurationProvider.
            </summary>
        </member>
        <member name="P:Spring2.Core.Configuration.ChainedConfigurationProvider.Settings">
            <summary>
            Returns the aggregated settings with those from AppSettingsProvider taking precedence.
            </summary>
        </member>
        <member name="T:Spring2.Core.Configuration.ConfigurationProvider">
            <summary>
            Summary description for ConfigurationProvider.
            </summary>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.Where(System.String)">
            <summary>
            Creates a where clause object by mapping the given where clause text.  The text may reference
            entity properties which will be mapped to sql code by enclosing the property names in braces.
            </summary>
            <param name="whereText">Text to be mapped</param>
            <returns>WhereClause object.</returns>
            <exception cref="T:System.ApplicationException">When property name found in braces is not found in the entity.</exception>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.Where(System.String,System.String)">
            <summary>
            Creates a where clause object that can be used to create sql to find objects whose entity property value
            matches the value passed.  Note that the propertyName passed is an entity property name and will be mapped 
            to the appropriate sql.
            </summary>
            <param name="propertyName">Entity property to be matched.</param>
            <param name="value">Value to match the property with</param>
            <returns>A WhereClause object.</returns>
            <exception cref="T:System.ApplicationException">When the property name passed is not found in the entity.</exception>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.Where(System.String,System.Int32)">
            <summary>
            Creates a where clause object that can be used to create sql to find objects whose entity property value
            matches the value passed.  Note that the propertyName passed is an entity property name and will be mapped 
            to the appropriate sql.
            </summary>
            <param name="propertyName">Entity property to be matched.</param>
            <param name="value">Value to match the property with</param>
            <returns>A WhereClause object.</returns>
            <exception cref="T:System.ApplicationException">When the property name passed is not found in the entity.</exception>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.Where(System.String,System.DateTime)">
            <summary>
            Creates a where clause object that can be used to create sql to find objects whose entity property value
            matches the value passed.  Note that the propertyName passed is an entity property name and will be mapped 
            to the appropriate sql.
            </summary>
            <param name="propertyName">Entity property to be matched.</param>
            <param name="value">Value to match the property with</param>
            <returns>A WhereClause object.</returns>
            <exception cref="T:System.ApplicationException">When the property name passed is not found in the entity.</exception>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.GetList">
            <summary>
            Returns a list of all ConfigurationSetting rows.
            </summary>
            <returns>List of ConfigurationSetting objects.</returns>
            <exception cref="T:Spring2.Core.DAO.FinderException">Thrown when no rows are found.</exception>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.GetList(Spring2.Core.DAO.IWhere)">
            <summary>
            Returns a filtered list of ConfigurationSetting rows.
            </summary>
            <param name="whereClause">Filtering criteria.</param>
            <returns>List of ConfigurationSetting objects.</returns>
            <exception cref="T:Spring2.Core.DAO.FinderException">Thrown when no rows are found matching the where criteria.</exception>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.GetList(Spring2.Core.DAO.IOrderBy)">
            <summary>
            Returns an ordered list of ConfigurationSetting rows.  All rows in the database are returned
            </summary>
            <param name="orderByClause">Ordering criteria.</param>
            <returns>List of ConfigurationSetting objects.</returns>
            <exception cref="T:Spring2.Core.DAO.FinderException">Thrown when no rows are found.</exception>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.GetList(Spring2.Core.DAO.IWhere,Spring2.Core.DAO.IOrderBy)">
            <summary>
            Returns an ordered and filtered list of ConfigurationSetting rows.
            </summary>
            <param name="whereClause">Filtering criteria.</param>
            <param name="orderByClause">Ordering criteria.</param>
            <returns>List of ConfigurationSetting objects.</returns>
            <exception cref="T:Spring2.Core.DAO.FinderException">Thrown when no rows are found matching the where criteria.</exception>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.GetList(System.Int32)">
            <summary>
            Returns a list of all ConfigurationSetting rows.
            </summary>
            <returns>List of ConfigurationSetting objects.</returns>
            <exception cref="T:Spring2.Core.DAO.FinderException">Thrown when no rows are found.</exception>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.GetList(Spring2.Core.DAO.IWhere,System.Int32)">
            <summary>
            Returns a filtered list of ConfigurationSetting rows.
            </summary>
            <param name="whereClause">Filtering criteria.</param>
            <param name="maxRows">Number of rows to return</param>
            <returns>List of ConfigurationSetting objects.</returns>
            <exception cref="T:Spring2.Core.DAO.FinderException">Thrown when no rows are found matching the where criteria.</exception>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.GetList(Spring2.Core.DAO.IOrderBy,System.Int32)">
            <summary>
            Returns an ordered list of ConfigurationSetting rows.  All rows in the database are returned
            </summary>
            <param name="orderByClause">Ordering criteria.</param>
            <param name="maxRows">Number of rows to return</param>
            <returns>List of ConfigurationSetting objects.</returns>
            <exception cref="T:Spring2.Core.DAO.FinderException">Thrown when no rows are found.</exception>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.GetList(Spring2.Core.DAO.IWhere,Spring2.Core.DAO.IOrderBy,System.Int32)">
            <summary>
            Returns an ordered and filtered list of ConfigurationSetting rows.
            </summary>
            <param name="whereClause">Filtering criteria.</param>
            <param name="orderByClause">Ordering criteria.</param>
            <param name="maxRows">Number of rows to return</param>
            <returns>List of ConfigurationSetting objects.</returns>
            <exception cref="T:Spring2.Core.DAO.FinderException">Thrown when no rows are found matching the where criteria.</exception>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.Load(Spring2.Core.Types.IdType)">
            <summary>
            Finds a ConfigurationSetting entity using it's primary key.
            </summary>
            <param name="configurationSettingId">A key field.</param>
            <returns>A ConfigurationSetting object.</returns>
            <exception cref="T:Spring2.Core.DAO.FinderException">Thrown when no entity exists witht he specified primary key..</exception>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.Reload(Spring2.Core.Configuration.ConfigurationSetting)">
            <summary>
            Repopulates an existing business entity instance
            </summary>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.GetDataObjectFromReader(Spring2.Core.Configuration.ConfigurationSetting,System.Data.IDataReader)">
            <summary>
            Builds a data object from the current row in a data reader..
            </summary>
            <param name="data"></param>
            <param name="dataReader">Container for database row.</param>
            <returns>Data object built from current row.</returns>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.GetDataObjectFromReader(System.Data.IDataReader)">
            <summary>
            Builds a data object from the current row in a data reader..
            </summary>
            <param name="dataReader">Container for database row.</param>
            <returns>Data object built from current row.</returns>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.GetDataObjectFromReader(System.Data.IDataReader,System.String)">
            <summary>
            Builds a data object from the current row in a data reader..
            </summary>
            <param name="dataReader">Container for database row.</param>
            <param name="prefix"></param>
            <returns>Data object built from current row.</returns>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.GetDataObjectFromReader(Spring2.Core.Configuration.ConfigurationSetting,System.Data.IDataReader,System.String)">
            <summary>
            Builds a data object from the current row in a data reader..
            </summary>
            <param name="data"></param>
            <param name="dataReader">Container for database row.</param>
            <param name="prefix"></param>
            <returns>Data object built from current row.</returns>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.Insert(Spring2.Core.Configuration.ConfigurationSetting)">
            <summary>
            Inserts a record into the ConfigurationSetting table.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.Insert(Spring2.Core.Configuration.ConfigurationSetting,System.Data.IDbTransaction)">
            <summary>
            Inserts a record into the ConfigurationSetting table.
            </summary>
            <param name="data"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.Update(Spring2.Core.Configuration.ConfigurationSetting)">
            <summary>
            Updates a record in the ConfigurationSetting table.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.Update(Spring2.Core.Configuration.ConfigurationSetting,System.Data.IDbTransaction)">
            <summary>
            Updates a record in the ConfigurationSetting table.
            </summary>
            <param name="data"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.Delete(Spring2.Core.Types.IdType)">
            <summary>
            Deletes a record from the ConfigurationSetting table by ConfigurationSettingId.
            </summary>
            <param name="configurationSettingId"></param>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.Delete(Spring2.Core.Types.IdType,System.Data.IDbTransaction)">
            <summary>
            Deletes a record from the ConfigurationSetting table by ConfigurationSettingId.
            </summary>
            <param name="configurationSettingId"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingDAO.FindModifications(Spring2.Core.Types.DateTimeType)">
            <summary>
            Returns a list of objects which match the values for the fields specified.
            </summary>
            <param name="lastModifiedDate">A field value to be matched.</param>
            <returns>The list of ConfigurationSettingDAO objects found.</returns>
        </member>
        <member name="T:Spring2.Core.Configuration.ConfigurationSettingList">
            <summary>
            IConfigurationSetting generic collection
            </summary>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingList.Contains(Spring2.Core.Types.IdType)">
            <summary>
            See if the list contains an instance by identity
            </summary>
        </member>
        <member name="P:Spring2.Core.Configuration.ConfigurationSettingList.Item(Spring2.Core.Types.IdType)">
            <summary>
            returns the instance by identity or null if it not found
            </summary>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingList.RetainAll(Spring2.Core.Configuration.ConfigurationSettingList)">
            <summary>
            Returns a new list that contains all of the elements that are in both lists
            </summary>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingList.RemoveAll(Spring2.Core.Configuration.ConfigurationSettingList)">
            <summary>
            return a new list that contains only the elements not contained in the argument list
            </summary>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingList.Sort(System.Collections.IComparer)">
            <summary>
            Sort a list by a column
            </summary>
        </member>
        <member name="M:Spring2.Core.Configuration.ConfigurationSettingList.Sort(System.String)">
            <summary>
            Sort the list given the name of a comparer class.
            </summary>
        </member>
        <member name="T:Spring2.Core.Configuration.IConfigurationProvider">
            <summary>
            Summary description for IConfigurationProvider.
            </summary>
        </member>
        <member name="T:Spring2.Core.Configuration.SimpleConfigurationProvider">
            <summary>
            ConfigurationProvider that is manually populated.  This provider does not have a store.
            </summary>
        </member>
        <member name="T:Spring2.Core.Configuration.SqlConfigurationProvider">
            <summary>
            Configuration provider that uses a sql table as a data store.
            </summary>
        </member>
        <member name="F:Spring2.Core.Configuration.SqlConfigurationProvider.debug">
            <summary>
            creates a logger that uses the OutputDebugPrint API - use DebugView to see what is being written
            </summary>
        </member>
    </members>
</doc>
