<?xml version="1.0" ?>
<project name="Spring2.Core" default="build" xmlnds="http://tempuri.org/nant-vs.xsd">
    <property name="debug" value="true" />
    <property name="build.root" value="..\" />
    <property name="build.dir" value="..\build" />
    <property name="release.dir" value="..\release" />
    <property name="src.dir" value="..\src" />
    <property name="build.major" value="x" />
    <property name="build.minor" value="x" />
    <property name="build.build" value="x" />
    <property name="build.revision" value="x" />
    <property name="svn.executable" value="svn" />

	<target name="clean">
		<exec program="make" commandline="clean" />
    </target>
	
    <target name="ccnet-build">
		<if test="${not property::exists('CCNetLabel')}"> 
			<fail message="CCNetLabel property not set, so can't create labelled distribution files" />
		</if>
		<call target="CreateAssemblyVersionInfo" />
		<exec program="make" commandline="clean clean_db clean_release" />
		<exec program="make" commandline="precommit packageonly" />
    </target>

    <target name="ccnet-publish">
		<if test="${not property::exists('CCNetLabel')}">
			<fail message="CCNetLabel property not set, so can't create labelled distribution files" />
		</if>
		<property name="publish.dir" value="${CCNetArtifactDirectory}\${CCNetLabel}" />

		<mkdir dir="${publish.dir}" />
		<copy todir="${publish.dir}">
			<fileset basedir="..\release">
			<include name="*"/>
			</fileset>
		</copy>
    </target>

	<!-- Populates variables (build.major, build.minor, build.build, and build.revision) with values
	        from AssemblyInfo.cs.  If property assemblyinfo.location is undefined, it will attempt to 
	        read AssemblyInfo.cs from the current directory. -->
	<target name="GetAssemblyVersion" description="Populates variables with the current version." >
	    <script language="C#">
	        <code><![CDATA[
	        public static void ScriptMain(Project project) {
	            if (project.Properties["assemblyinfo.location"] == null)
	                project.Properties["assemblyinfo.location"] = "AssemblyVersionInfo.cs";
	            string assemblyInfoFilename = project.Properties["assemblyinfo.location"];
	
	            using (StreamReader reader = File.OpenText(assemblyInfoFilename))
	            {
	                Regex expression = new Regex(
	                   @"^\[assembly: System.Reflection.AssemblyVersion\(\""([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)");
	                string line = reader.ReadLine();
	                while (line != null) {
	                    Match match = expression.Match(line);
	                    if (match.Success) {
	                        project.Properties["build.major"] = match.Result("$1");
	                        project.Properties["build.minor"] = match.Result("$2");
	                        project.Properties["build.build"] = match.Result("$3");
	                        project.Properties["build.revision"] = match.Result("$4");
	                        break;
	                    }
	                    line = reader.ReadLine();
	                }
	            } 
	        }
	    ]]></code>
	    </script>
	    <echo message="version='${build.major}.${build.minor}.${build.build}.${build.revision}'"/> 
	</target>
	
    <target name="CreateAssemblyVersionInfo" description="Create an assembly info file with the current build number" >
		<if test="${not property::exists('CCNetLabel')}">
			<fail message="CCNetLabel property not set, so can't create labelled distribution files" />
		</if>
		<asminfo output="AssemblyVersionInfo.cs" language="CSharp">
			<imports>
				<import namespace="System.Reflection" />
			</imports>
			<attributes>
				<attribute type="System.Reflection.AssemblyVersionAttribute" value="${CCNetLabel}" />
				<!--<attribute type="AssemblyCopyrightAttribute" value="Copyright 2014 Spring2 Technologies" />
				<attribute type="AssemblyCompanyAttribute" value="Spring2 Technologies" />
				<attribute type="AssemblyProductAttribute" value="Spring2.Core" />-->
			</attributes>
		</asminfo>
	</target>
	
	<target name="getSubversionRevision">
	<!-- Retrieve subversion revision number -->
	<echo message="Retrieving Subversion revision number"/>
	<property name="svn.revision" value="0"/>
	<exec
		program="svn"
		commandline='log "${src.dir}" --xml --limit 1'
		output="${src.dir}\_revision.xml"
		failonerror="false"/>
	<xmlpeek
		file="${src.dir}\_revision.xml"
		xpath="/log/logentry/@revision"
		property="svn.revision"
		failonerror="false"/>
	<echo message="Using Subversion revision number: ${svn.revision}"/>
    </target>

    <target name="version" description="outputs version number to VersionInfo.cs">
	  <echo file="${projectdir}/Properties/VersionInfo.cs">
	    [assembly: System.Reflection.AssemblyVersion("$(CCNetLabel)")]
	    [assembly: System.Reflection.AssemblyFileVersion("$(CCNetLabel)")]
	  </echo>
	</target>

</project>