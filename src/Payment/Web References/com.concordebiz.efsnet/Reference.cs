//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1826
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1826.
// 
#pragma warning disable 1591

namespace Spring2.Core.Payment.Web_References.com.concordebiz.efsnet {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EFSnetSoapBinding", Namespace="http://tempuri.org/wsdl/")]
    public partial class EFSnet2 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback QueryIdentityChekAuditSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryIdentityChekAuditRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryIdentityChekTransactionTotalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryIdentityChekTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryBatchTotalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryBatchesOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryTransactionTotalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSettlementTotalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessorTotalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TimeOutReversalOperationCompleted;
        
        private System.Threading.SendOrPostCallback VoidTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback IdentityChekOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeleCheckICARefundOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeleCheckICASettleOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeleCheckICAAuthorizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeleCheckRiskManagementOperationCompleted;
        
        private System.Threading.SendOrPostCallback STARChekDirectDebitOperationCompleted;
        
        private System.Threading.SendOrPostCallback STARChekDirectVerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback FIAccountVerificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback STARChekOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardDeactivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardActivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardBalanceIncreaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardBalanceInquiryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardRefundOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardCaptureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardSettleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardAuthorizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardChargeOperationCompleted;
        
        private System.Threading.SendOrPostCallback BenefitsBalanceInquiryOperationCompleted;
        
        private System.Threading.SendOrPostCallback CashBenefitChargeOperationCompleted;
        
        private System.Threading.SendOrPostCallback FoodStampVoucherOperationCompleted;
        
        private System.Threading.SendOrPostCallback FoodStampCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback FoodStampChargeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DebitSessionKeyChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DebitCardCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback DebitCardCaptureOperationCompleted;
        
        private System.Threading.SendOrPostCallback DebitCardAuthorizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DebitCardChargePINlessOperationCompleted;
        
        private System.Threading.SendOrPostCallback DebitCardChargeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditCardAddressVerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAuthenticationResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditCardAuthorizeWithAuthenticationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditCardVoiceAuthorizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditCardCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditCardRefundOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditCardCaptureOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditCardSettleOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditCardChargeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditCardAuthorizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestPassThroughOperationCompleted;
        
        private System.Threading.SendOrPostCallback SystemCheckOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EFSnet2() {
            this.Url = "https://EFSnet.concordebiz.com/EFSnet2.wsdl";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event QueryIdentityChekAuditSummaryCompletedEventHandler QueryIdentityChekAuditSummaryCompleted;
        
        /// <remarks/>
        public event QueryIdentityChekAuditRecordsCompletedEventHandler QueryIdentityChekAuditRecordsCompleted;
        
        /// <remarks/>
        public event QueryIdentityChekTransactionTotalsCompletedEventHandler QueryIdentityChekTransactionTotalsCompleted;
        
        /// <remarks/>
        public event QueryIdentityChekTransactionsCompletedEventHandler QueryIdentityChekTransactionsCompleted;
        
        /// <remarks/>
        public event QueryBatchTotalsCompletedEventHandler QueryBatchTotalsCompleted;
        
        /// <remarks/>
        public event QueryBatchesCompletedEventHandler QueryBatchesCompleted;
        
        /// <remarks/>
        public event QueryTransactionTotalsCompletedEventHandler QueryTransactionTotalsCompleted;
        
        /// <remarks/>
        public event QueryTransactionsCompletedEventHandler QueryTransactionsCompleted;
        
        /// <remarks/>
        public event GetSettlementTotalsCompletedEventHandler GetSettlementTotalsCompleted;
        
        /// <remarks/>
        public event GetProcessorTotalsCompletedEventHandler GetProcessorTotalsCompleted;
        
        /// <remarks/>
        public event TimeOutReversalCompletedEventHandler TimeOutReversalCompleted;
        
        /// <remarks/>
        public event VoidTransactionCompletedEventHandler VoidTransactionCompleted;
        
        /// <remarks/>
        public event IdentityChekCompletedEventHandler IdentityChekCompleted;
        
        /// <remarks/>
        public event TeleCheckICARefundCompletedEventHandler TeleCheckICARefundCompleted;
        
        /// <remarks/>
        public event TeleCheckICASettleCompletedEventHandler TeleCheckICASettleCompleted;
        
        /// <remarks/>
        public event TeleCheckICAAuthorizeCompletedEventHandler TeleCheckICAAuthorizeCompleted;
        
        /// <remarks/>
        public event TeleCheckRiskManagementCompletedEventHandler TeleCheckRiskManagementCompleted;
        
        /// <remarks/>
        public event STARChekDirectDebitCompletedEventHandler STARChekDirectDebitCompleted;
        
        /// <remarks/>
        public event STARChekDirectVerifyCompletedEventHandler STARChekDirectVerifyCompleted;
        
        /// <remarks/>
        public event FIAccountVerificationCompletedEventHandler FIAccountVerificationCompleted;
        
        /// <remarks/>
        public event STARChekCompletedEventHandler STARChekCompleted;
        
        /// <remarks/>
        public event GiftCardDeactivateCompletedEventHandler GiftCardDeactivateCompleted;
        
        /// <remarks/>
        public event GiftCardActivateCompletedEventHandler GiftCardActivateCompleted;
        
        /// <remarks/>
        public event GiftCardBalanceIncreaseCompletedEventHandler GiftCardBalanceIncreaseCompleted;
        
        /// <remarks/>
        public event GiftCardBalanceInquiryCompletedEventHandler GiftCardBalanceInquiryCompleted;
        
        /// <remarks/>
        public event GiftCardCreditCompletedEventHandler GiftCardCreditCompleted;
        
        /// <remarks/>
        public event GiftCardRefundCompletedEventHandler GiftCardRefundCompleted;
        
        /// <remarks/>
        public event GiftCardCaptureCompletedEventHandler GiftCardCaptureCompleted;
        
        /// <remarks/>
        public event GiftCardSettleCompletedEventHandler GiftCardSettleCompleted;
        
        /// <remarks/>
        public event GiftCardAuthorizeCompletedEventHandler GiftCardAuthorizeCompleted;
        
        /// <remarks/>
        public event GiftCardChargeCompletedEventHandler GiftCardChargeCompleted;
        
        /// <remarks/>
        public event BenefitsBalanceInquiryCompletedEventHandler BenefitsBalanceInquiryCompleted;
        
        /// <remarks/>
        public event CashBenefitChargeCompletedEventHandler CashBenefitChargeCompleted;
        
        /// <remarks/>
        public event FoodStampVoucherCompletedEventHandler FoodStampVoucherCompleted;
        
        /// <remarks/>
        public event FoodStampCreditCompletedEventHandler FoodStampCreditCompleted;
        
        /// <remarks/>
        public event FoodStampChargeCompletedEventHandler FoodStampChargeCompleted;
        
        /// <remarks/>
        public event DebitSessionKeyChangeCompletedEventHandler DebitSessionKeyChangeCompleted;
        
        /// <remarks/>
        public event DebitCardCreditCompletedEventHandler DebitCardCreditCompleted;
        
        /// <remarks/>
        public event DebitCardCaptureCompletedEventHandler DebitCardCaptureCompleted;
        
        /// <remarks/>
        public event DebitCardAuthorizeCompletedEventHandler DebitCardAuthorizeCompleted;
        
        /// <remarks/>
        public event DebitCardChargePINlessCompletedEventHandler DebitCardChargePINlessCompleted;
        
        /// <remarks/>
        public event DebitCardChargeCompletedEventHandler DebitCardChargeCompleted;
        
        /// <remarks/>
        public event CreditCardAddressVerifyCompletedEventHandler CreditCardAddressVerifyCompleted;
        
        /// <remarks/>
        public event ProcessAuthenticationResponseCompletedEventHandler ProcessAuthenticationResponseCompleted;
        
        /// <remarks/>
        public event CreditCardAuthorizeWithAuthenticationCompletedEventHandler CreditCardAuthorizeWithAuthenticationCompleted;
        
        /// <remarks/>
        public event CreditCardVoiceAuthorizeCompletedEventHandler CreditCardVoiceAuthorizeCompleted;
        
        /// <remarks/>
        public event CreditCardCreditCompletedEventHandler CreditCardCreditCompleted;
        
        /// <remarks/>
        public event CreditCardRefundCompletedEventHandler CreditCardRefundCompleted;
        
        /// <remarks/>
        public event CreditCardCaptureCompletedEventHandler CreditCardCaptureCompleted;
        
        /// <remarks/>
        public event CreditCardSettleCompletedEventHandler CreditCardSettleCompleted;
        
        /// <remarks/>
        public event CreditCardChargeCompletedEventHandler CreditCardChargeCompleted;
        
        /// <remarks/>
        public event CreditCardAuthorizeCompletedEventHandler CreditCardAuthorizeCompleted;
        
        /// <remarks/>
        public event RequestPassThroughCompletedEventHandler RequestPassThroughCompleted;
        
        /// <remarks/>
        public event SystemCheckCompletedEventHandler SystemCheckCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.QueryIdentityChekAuditSummary", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int QueryIdentityChekAuditSummary(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string InquiryNumber, 
                    string BranchID, 
                    string MultiBank, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string BusinessName, 
                    out string ItemCount, 
                    out string QueryDataSize, 
                    out string QueryData) {
            object[] results = this.Invoke("QueryIdentityChekAuditSummary", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        TransactionDateBegin,
                        TransactionDateEnd,
                        TransactionTimeBegin,
                        TransactionTimeEnd,
                        InquiryNumber,
                        BranchID,
                        MultiBank,
                        ClerkNumber,
                        FirstName,
                        MiddleName,
                        LastName,
                        BusinessName});
            ItemCount = ((string)(results[1]));
            QueryDataSize = ((string)(results[2]));
            QueryData = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void QueryIdentityChekAuditSummaryAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string InquiryNumber, 
                    string BranchID, 
                    string MultiBank, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string BusinessName) {
            this.QueryIdentityChekAuditSummaryAsync(StoreID, StoreKey, ApplicationID, DeliveryMethod, TransactionDateBegin, TransactionDateEnd, TransactionTimeBegin, TransactionTimeEnd, InquiryNumber, BranchID, MultiBank, ClerkNumber, FirstName, MiddleName, LastName, BusinessName, null);
        }
        
        /// <remarks/>
        public void QueryIdentityChekAuditSummaryAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string InquiryNumber, 
                    string BranchID, 
                    string MultiBank, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string BusinessName, 
                    object userState) {
            if ((this.QueryIdentityChekAuditSummaryOperationCompleted == null)) {
                this.QueryIdentityChekAuditSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryIdentityChekAuditSummaryOperationCompleted);
            }
            this.InvokeAsync("QueryIdentityChekAuditSummary", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        TransactionDateBegin,
                        TransactionDateEnd,
                        TransactionTimeBegin,
                        TransactionTimeEnd,
                        InquiryNumber,
                        BranchID,
                        MultiBank,
                        ClerkNumber,
                        FirstName,
                        MiddleName,
                        LastName,
                        BusinessName}, this.QueryIdentityChekAuditSummaryOperationCompleted, userState);
        }
        
        private void OnQueryIdentityChekAuditSummaryOperationCompleted(object arg) {
            if ((this.QueryIdentityChekAuditSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryIdentityChekAuditSummaryCompleted(this, new QueryIdentityChekAuditSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.QueryIdentityChekAuditRecords", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int QueryIdentityChekAuditRecords(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string InquiryNumber, 
                    string BranchID, 
                    string MultiBank, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string BusinessName, 
                    out string ItemCount, 
                    out string QueryDataSize, 
                    out string QueryData) {
            object[] results = this.Invoke("QueryIdentityChekAuditRecords", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        TransactionDateBegin,
                        TransactionDateEnd,
                        TransactionTimeBegin,
                        TransactionTimeEnd,
                        InquiryNumber,
                        BranchID,
                        MultiBank,
                        ClerkNumber,
                        FirstName,
                        MiddleName,
                        LastName,
                        BusinessName});
            ItemCount = ((string)(results[1]));
            QueryDataSize = ((string)(results[2]));
            QueryData = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void QueryIdentityChekAuditRecordsAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string InquiryNumber, 
                    string BranchID, 
                    string MultiBank, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string BusinessName) {
            this.QueryIdentityChekAuditRecordsAsync(StoreID, StoreKey, ApplicationID, DeliveryMethod, TransactionDateBegin, TransactionDateEnd, TransactionTimeBegin, TransactionTimeEnd, InquiryNumber, BranchID, MultiBank, ClerkNumber, FirstName, MiddleName, LastName, BusinessName, null);
        }
        
        /// <remarks/>
        public void QueryIdentityChekAuditRecordsAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string InquiryNumber, 
                    string BranchID, 
                    string MultiBank, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string BusinessName, 
                    object userState) {
            if ((this.QueryIdentityChekAuditRecordsOperationCompleted == null)) {
                this.QueryIdentityChekAuditRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryIdentityChekAuditRecordsOperationCompleted);
            }
            this.InvokeAsync("QueryIdentityChekAuditRecords", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        TransactionDateBegin,
                        TransactionDateEnd,
                        TransactionTimeBegin,
                        TransactionTimeEnd,
                        InquiryNumber,
                        BranchID,
                        MultiBank,
                        ClerkNumber,
                        FirstName,
                        MiddleName,
                        LastName,
                        BusinessName}, this.QueryIdentityChekAuditRecordsOperationCompleted, userState);
        }
        
        private void OnQueryIdentityChekAuditRecordsOperationCompleted(object arg) {
            if ((this.QueryIdentityChekAuditRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryIdentityChekAuditRecordsCompleted(this, new QueryIdentityChekAuditRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.QueryIdentityChekTransactionTotals", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int QueryIdentityChekTransactionTotals(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionID, 
                    string TransactionStatus, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string ReferenceNumber, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string NameSuffix, 
                    string BusinessName, 
                    string FirstAddress, 
                    string FirstCity, 
                    string FirstState, 
                    string FirstPostalCode, 
                    string FirstCountry, 
                    string SecondAddress, 
                    string SecondCity, 
                    string SecondState, 
                    string SecondPostalCode, 
                    string SecondCountry, 
                    string HomePhoneNumber, 
                    string WorkPhoneNumber, 
                    string TaxIDNumber, 
                    string AlienRegistrationNumber, 
                    string CountryOfCitizenship, 
                    string IdentificationType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string IdentificationCountry, 
                    string BirthDate, 
                    string BirthCity, 
                    string BirthState, 
                    string BirthCountry, 
                    string Gender, 
                    string InquiryNumber, 
                    out string ItemCount, 
                    out string QueryDataSize, 
                    out string QueryData) {
            object[] results = this.Invoke("QueryIdentityChekTransactionTotals", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        TransactionID,
                        TransactionStatus,
                        TransactionDateBegin,
                        TransactionDateEnd,
                        TransactionTimeBegin,
                        TransactionTimeEnd,
                        ReferenceNumber,
                        ClerkNumber,
                        FirstName,
                        MiddleName,
                        LastName,
                        NameSuffix,
                        BusinessName,
                        FirstAddress,
                        FirstCity,
                        FirstState,
                        FirstPostalCode,
                        FirstCountry,
                        SecondAddress,
                        SecondCity,
                        SecondState,
                        SecondPostalCode,
                        SecondCountry,
                        HomePhoneNumber,
                        WorkPhoneNumber,
                        TaxIDNumber,
                        AlienRegistrationNumber,
                        CountryOfCitizenship,
                        IdentificationType,
                        IdentificationNumber,
                        IdentificationState,
                        IdentificationCountry,
                        BirthDate,
                        BirthCity,
                        BirthState,
                        BirthCountry,
                        Gender,
                        InquiryNumber});
            ItemCount = ((string)(results[1]));
            QueryDataSize = ((string)(results[2]));
            QueryData = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void QueryIdentityChekTransactionTotalsAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionID, 
                    string TransactionStatus, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string ReferenceNumber, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string NameSuffix, 
                    string BusinessName, 
                    string FirstAddress, 
                    string FirstCity, 
                    string FirstState, 
                    string FirstPostalCode, 
                    string FirstCountry, 
                    string SecondAddress, 
                    string SecondCity, 
                    string SecondState, 
                    string SecondPostalCode, 
                    string SecondCountry, 
                    string HomePhoneNumber, 
                    string WorkPhoneNumber, 
                    string TaxIDNumber, 
                    string AlienRegistrationNumber, 
                    string CountryOfCitizenship, 
                    string IdentificationType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string IdentificationCountry, 
                    string BirthDate, 
                    string BirthCity, 
                    string BirthState, 
                    string BirthCountry, 
                    string Gender, 
                    string InquiryNumber) {
            this.QueryIdentityChekTransactionTotalsAsync(StoreID, StoreKey, ApplicationID, DeliveryMethod, TransactionID, TransactionStatus, TransactionDateBegin, TransactionDateEnd, TransactionTimeBegin, TransactionTimeEnd, ReferenceNumber, ClerkNumber, FirstName, MiddleName, LastName, NameSuffix, BusinessName, FirstAddress, FirstCity, FirstState, FirstPostalCode, FirstCountry, SecondAddress, SecondCity, SecondState, SecondPostalCode, SecondCountry, HomePhoneNumber, WorkPhoneNumber, TaxIDNumber, AlienRegistrationNumber, CountryOfCitizenship, IdentificationType, IdentificationNumber, IdentificationState, IdentificationCountry, BirthDate, BirthCity, BirthState, BirthCountry, Gender, InquiryNumber, null);
        }
        
        /// <remarks/>
        public void QueryIdentityChekTransactionTotalsAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionID, 
                    string TransactionStatus, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string ReferenceNumber, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string NameSuffix, 
                    string BusinessName, 
                    string FirstAddress, 
                    string FirstCity, 
                    string FirstState, 
                    string FirstPostalCode, 
                    string FirstCountry, 
                    string SecondAddress, 
                    string SecondCity, 
                    string SecondState, 
                    string SecondPostalCode, 
                    string SecondCountry, 
                    string HomePhoneNumber, 
                    string WorkPhoneNumber, 
                    string TaxIDNumber, 
                    string AlienRegistrationNumber, 
                    string CountryOfCitizenship, 
                    string IdentificationType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string IdentificationCountry, 
                    string BirthDate, 
                    string BirthCity, 
                    string BirthState, 
                    string BirthCountry, 
                    string Gender, 
                    string InquiryNumber, 
                    object userState) {
            if ((this.QueryIdentityChekTransactionTotalsOperationCompleted == null)) {
                this.QueryIdentityChekTransactionTotalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryIdentityChekTransactionTotalsOperationCompleted);
            }
            this.InvokeAsync("QueryIdentityChekTransactionTotals", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        TransactionID,
                        TransactionStatus,
                        TransactionDateBegin,
                        TransactionDateEnd,
                        TransactionTimeBegin,
                        TransactionTimeEnd,
                        ReferenceNumber,
                        ClerkNumber,
                        FirstName,
                        MiddleName,
                        LastName,
                        NameSuffix,
                        BusinessName,
                        FirstAddress,
                        FirstCity,
                        FirstState,
                        FirstPostalCode,
                        FirstCountry,
                        SecondAddress,
                        SecondCity,
                        SecondState,
                        SecondPostalCode,
                        SecondCountry,
                        HomePhoneNumber,
                        WorkPhoneNumber,
                        TaxIDNumber,
                        AlienRegistrationNumber,
                        CountryOfCitizenship,
                        IdentificationType,
                        IdentificationNumber,
                        IdentificationState,
                        IdentificationCountry,
                        BirthDate,
                        BirthCity,
                        BirthState,
                        BirthCountry,
                        Gender,
                        InquiryNumber}, this.QueryIdentityChekTransactionTotalsOperationCompleted, userState);
        }
        
        private void OnQueryIdentityChekTransactionTotalsOperationCompleted(object arg) {
            if ((this.QueryIdentityChekTransactionTotalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryIdentityChekTransactionTotalsCompleted(this, new QueryIdentityChekTransactionTotalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.QueryIdentityChekTransactions", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int QueryIdentityChekTransactions(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionID, 
                    string TransactionStatus, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string ReferenceNumber, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string NameSuffix, 
                    string BusinessName, 
                    string FirstAddress, 
                    string FirstCity, 
                    string FirstState, 
                    string FirstPostalCode, 
                    string FirstCountry, 
                    string SecondAddress, 
                    string SecondCity, 
                    string SecondState, 
                    string SecondPostalCode, 
                    string SecondCountry, 
                    string HomePhoneNumber, 
                    string WorkPhoneNumber, 
                    string TaxIDNumber, 
                    string AlienRegistrationNumber, 
                    string CountryOfCitizenship, 
                    string IdentificationType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string IdentificationCountry, 
                    string BirthDate, 
                    string BirthCity, 
                    string BirthState, 
                    string BirthCountry, 
                    string Gender, 
                    string InquiryNumber, 
                    out string ItemCount, 
                    out string QueryDataSize, 
                    out string QueryData) {
            object[] results = this.Invoke("QueryIdentityChekTransactions", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        TransactionID,
                        TransactionStatus,
                        TransactionDateBegin,
                        TransactionDateEnd,
                        TransactionTimeBegin,
                        TransactionTimeEnd,
                        ReferenceNumber,
                        ClerkNumber,
                        FirstName,
                        MiddleName,
                        LastName,
                        NameSuffix,
                        BusinessName,
                        FirstAddress,
                        FirstCity,
                        FirstState,
                        FirstPostalCode,
                        FirstCountry,
                        SecondAddress,
                        SecondCity,
                        SecondState,
                        SecondPostalCode,
                        SecondCountry,
                        HomePhoneNumber,
                        WorkPhoneNumber,
                        TaxIDNumber,
                        AlienRegistrationNumber,
                        CountryOfCitizenship,
                        IdentificationType,
                        IdentificationNumber,
                        IdentificationState,
                        IdentificationCountry,
                        BirthDate,
                        BirthCity,
                        BirthState,
                        BirthCountry,
                        Gender,
                        InquiryNumber});
            ItemCount = ((string)(results[1]));
            QueryDataSize = ((string)(results[2]));
            QueryData = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void QueryIdentityChekTransactionsAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionID, 
                    string TransactionStatus, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string ReferenceNumber, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string NameSuffix, 
                    string BusinessName, 
                    string FirstAddress, 
                    string FirstCity, 
                    string FirstState, 
                    string FirstPostalCode, 
                    string FirstCountry, 
                    string SecondAddress, 
                    string SecondCity, 
                    string SecondState, 
                    string SecondPostalCode, 
                    string SecondCountry, 
                    string HomePhoneNumber, 
                    string WorkPhoneNumber, 
                    string TaxIDNumber, 
                    string AlienRegistrationNumber, 
                    string CountryOfCitizenship, 
                    string IdentificationType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string IdentificationCountry, 
                    string BirthDate, 
                    string BirthCity, 
                    string BirthState, 
                    string BirthCountry, 
                    string Gender, 
                    string InquiryNumber) {
            this.QueryIdentityChekTransactionsAsync(StoreID, StoreKey, ApplicationID, DeliveryMethod, TransactionID, TransactionStatus, TransactionDateBegin, TransactionDateEnd, TransactionTimeBegin, TransactionTimeEnd, ReferenceNumber, ClerkNumber, FirstName, MiddleName, LastName, NameSuffix, BusinessName, FirstAddress, FirstCity, FirstState, FirstPostalCode, FirstCountry, SecondAddress, SecondCity, SecondState, SecondPostalCode, SecondCountry, HomePhoneNumber, WorkPhoneNumber, TaxIDNumber, AlienRegistrationNumber, CountryOfCitizenship, IdentificationType, IdentificationNumber, IdentificationState, IdentificationCountry, BirthDate, BirthCity, BirthState, BirthCountry, Gender, InquiryNumber, null);
        }
        
        /// <remarks/>
        public void QueryIdentityChekTransactionsAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionID, 
                    string TransactionStatus, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string ReferenceNumber, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string NameSuffix, 
                    string BusinessName, 
                    string FirstAddress, 
                    string FirstCity, 
                    string FirstState, 
                    string FirstPostalCode, 
                    string FirstCountry, 
                    string SecondAddress, 
                    string SecondCity, 
                    string SecondState, 
                    string SecondPostalCode, 
                    string SecondCountry, 
                    string HomePhoneNumber, 
                    string WorkPhoneNumber, 
                    string TaxIDNumber, 
                    string AlienRegistrationNumber, 
                    string CountryOfCitizenship, 
                    string IdentificationType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string IdentificationCountry, 
                    string BirthDate, 
                    string BirthCity, 
                    string BirthState, 
                    string BirthCountry, 
                    string Gender, 
                    string InquiryNumber, 
                    object userState) {
            if ((this.QueryIdentityChekTransactionsOperationCompleted == null)) {
                this.QueryIdentityChekTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryIdentityChekTransactionsOperationCompleted);
            }
            this.InvokeAsync("QueryIdentityChekTransactions", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        TransactionID,
                        TransactionStatus,
                        TransactionDateBegin,
                        TransactionDateEnd,
                        TransactionTimeBegin,
                        TransactionTimeEnd,
                        ReferenceNumber,
                        ClerkNumber,
                        FirstName,
                        MiddleName,
                        LastName,
                        NameSuffix,
                        BusinessName,
                        FirstAddress,
                        FirstCity,
                        FirstState,
                        FirstPostalCode,
                        FirstCountry,
                        SecondAddress,
                        SecondCity,
                        SecondState,
                        SecondPostalCode,
                        SecondCountry,
                        HomePhoneNumber,
                        WorkPhoneNumber,
                        TaxIDNumber,
                        AlienRegistrationNumber,
                        CountryOfCitizenship,
                        IdentificationType,
                        IdentificationNumber,
                        IdentificationState,
                        IdentificationCountry,
                        BirthDate,
                        BirthCity,
                        BirthState,
                        BirthCountry,
                        Gender,
                        InquiryNumber}, this.QueryIdentityChekTransactionsOperationCompleted, userState);
        }
        
        private void OnQueryIdentityChekTransactionsOperationCompleted(object arg) {
            if ((this.QueryIdentityChekTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryIdentityChekTransactionsCompleted(this, new QueryIdentityChekTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.QueryBatchTotals", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int QueryBatchTotals(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string BatchID, 
                    string BatchStatus, 
                    string BatchSubmitDateBegin, 
                    string BatchSubmitDateEnd, 
                    string BatchSubmitTimeBegin, 
                    string BatchSubmitTimeEnd, 
                    string BatchCompleteDateBegin, 
                    string BatchCompleteDateEnd, 
                    string BatchCompleteTimeBegin, 
                    string BatchCompleteTimeEnd, 
                    string ReferenceNumber, 
                    string Comments, 
                    out string ItemCount, 
                    out string QueryDataSize, 
                    out string QueryData) {
            object[] results = this.Invoke("QueryBatchTotals", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        BatchID,
                        BatchStatus,
                        BatchSubmitDateBegin,
                        BatchSubmitDateEnd,
                        BatchSubmitTimeBegin,
                        BatchSubmitTimeEnd,
                        BatchCompleteDateBegin,
                        BatchCompleteDateEnd,
                        BatchCompleteTimeBegin,
                        BatchCompleteTimeEnd,
                        ReferenceNumber,
                        Comments});
            ItemCount = ((string)(results[1]));
            QueryDataSize = ((string)(results[2]));
            QueryData = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void QueryBatchTotalsAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string BatchID, 
                    string BatchStatus, 
                    string BatchSubmitDateBegin, 
                    string BatchSubmitDateEnd, 
                    string BatchSubmitTimeBegin, 
                    string BatchSubmitTimeEnd, 
                    string BatchCompleteDateBegin, 
                    string BatchCompleteDateEnd, 
                    string BatchCompleteTimeBegin, 
                    string BatchCompleteTimeEnd, 
                    string ReferenceNumber, 
                    string Comments) {
            this.QueryBatchTotalsAsync(StoreID, StoreKey, ApplicationID, DeliveryMethod, BatchID, BatchStatus, BatchSubmitDateBegin, BatchSubmitDateEnd, BatchSubmitTimeBegin, BatchSubmitTimeEnd, BatchCompleteDateBegin, BatchCompleteDateEnd, BatchCompleteTimeBegin, BatchCompleteTimeEnd, ReferenceNumber, Comments, null);
        }
        
        /// <remarks/>
        public void QueryBatchTotalsAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string BatchID, 
                    string BatchStatus, 
                    string BatchSubmitDateBegin, 
                    string BatchSubmitDateEnd, 
                    string BatchSubmitTimeBegin, 
                    string BatchSubmitTimeEnd, 
                    string BatchCompleteDateBegin, 
                    string BatchCompleteDateEnd, 
                    string BatchCompleteTimeBegin, 
                    string BatchCompleteTimeEnd, 
                    string ReferenceNumber, 
                    string Comments, 
                    object userState) {
            if ((this.QueryBatchTotalsOperationCompleted == null)) {
                this.QueryBatchTotalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryBatchTotalsOperationCompleted);
            }
            this.InvokeAsync("QueryBatchTotals", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        BatchID,
                        BatchStatus,
                        BatchSubmitDateBegin,
                        BatchSubmitDateEnd,
                        BatchSubmitTimeBegin,
                        BatchSubmitTimeEnd,
                        BatchCompleteDateBegin,
                        BatchCompleteDateEnd,
                        BatchCompleteTimeBegin,
                        BatchCompleteTimeEnd,
                        ReferenceNumber,
                        Comments}, this.QueryBatchTotalsOperationCompleted, userState);
        }
        
        private void OnQueryBatchTotalsOperationCompleted(object arg) {
            if ((this.QueryBatchTotalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryBatchTotalsCompleted(this, new QueryBatchTotalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.QueryBatches", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int QueryBatches(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string BatchID, 
                    string BatchStatus, 
                    string BatchSubmitDateBegin, 
                    string BatchSubmitDateEnd, 
                    string BatchSubmitTimeBegin, 
                    string BatchSubmitTimeEnd, 
                    string BatchCompleteDateBegin, 
                    string BatchCompleteDateEnd, 
                    string BatchCompleteTimeBegin, 
                    string BatchCompleteTimeEnd, 
                    string ReferenceNumber, 
                    string Comments, 
                    out string ItemCount, 
                    out string QueryDataSize, 
                    out string QueryData) {
            object[] results = this.Invoke("QueryBatches", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        BatchID,
                        BatchStatus,
                        BatchSubmitDateBegin,
                        BatchSubmitDateEnd,
                        BatchSubmitTimeBegin,
                        BatchSubmitTimeEnd,
                        BatchCompleteDateBegin,
                        BatchCompleteDateEnd,
                        BatchCompleteTimeBegin,
                        BatchCompleteTimeEnd,
                        ReferenceNumber,
                        Comments});
            ItemCount = ((string)(results[1]));
            QueryDataSize = ((string)(results[2]));
            QueryData = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void QueryBatchesAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string BatchID, 
                    string BatchStatus, 
                    string BatchSubmitDateBegin, 
                    string BatchSubmitDateEnd, 
                    string BatchSubmitTimeBegin, 
                    string BatchSubmitTimeEnd, 
                    string BatchCompleteDateBegin, 
                    string BatchCompleteDateEnd, 
                    string BatchCompleteTimeBegin, 
                    string BatchCompleteTimeEnd, 
                    string ReferenceNumber, 
                    string Comments) {
            this.QueryBatchesAsync(StoreID, StoreKey, ApplicationID, DeliveryMethod, BatchID, BatchStatus, BatchSubmitDateBegin, BatchSubmitDateEnd, BatchSubmitTimeBegin, BatchSubmitTimeEnd, BatchCompleteDateBegin, BatchCompleteDateEnd, BatchCompleteTimeBegin, BatchCompleteTimeEnd, ReferenceNumber, Comments, null);
        }
        
        /// <remarks/>
        public void QueryBatchesAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string BatchID, 
                    string BatchStatus, 
                    string BatchSubmitDateBegin, 
                    string BatchSubmitDateEnd, 
                    string BatchSubmitTimeBegin, 
                    string BatchSubmitTimeEnd, 
                    string BatchCompleteDateBegin, 
                    string BatchCompleteDateEnd, 
                    string BatchCompleteTimeBegin, 
                    string BatchCompleteTimeEnd, 
                    string ReferenceNumber, 
                    string Comments, 
                    object userState) {
            if ((this.QueryBatchesOperationCompleted == null)) {
                this.QueryBatchesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryBatchesOperationCompleted);
            }
            this.InvokeAsync("QueryBatches", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        BatchID,
                        BatchStatus,
                        BatchSubmitDateBegin,
                        BatchSubmitDateEnd,
                        BatchSubmitTimeBegin,
                        BatchSubmitTimeEnd,
                        BatchCompleteDateBegin,
                        BatchCompleteDateEnd,
                        BatchCompleteTimeBegin,
                        BatchCompleteTimeEnd,
                        ReferenceNumber,
                        Comments}, this.QueryBatchesOperationCompleted, userState);
        }
        
        private void OnQueryBatchesOperationCompleted(object arg) {
            if ((this.QueryBatchesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryBatchesCompleted(this, new QueryBatchesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.QueryTransactionTotals", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int QueryTransactionTotals(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionID, 
                    string TerminalID, 
                    string TransactionType, 
                    string TransactionStatus, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string SettlementDateBegin, 
                    string SettlementDateEnd, 
                    string ParentTransactionID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ApprovalNumber, 
                    string ClientIPAddress, 
                    string OriginalTransactionID, 
                    string OriginalTransactionAmount, 
                    out string ItemCount, 
                    out string QueryDataSize, 
                    out string QueryData) {
            object[] results = this.Invoke("QueryTransactionTotals", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        TransactionID,
                        TerminalID,
                        TransactionType,
                        TransactionStatus,
                        TransactionDateBegin,
                        TransactionDateEnd,
                        TransactionTimeBegin,
                        TransactionTimeEnd,
                        SettlementDateBegin,
                        SettlementDateEnd,
                        ParentTransactionID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        CashBackAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        RoutingNumber,
                        CheckNumber,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ApprovalNumber,
                        ClientIPAddress,
                        OriginalTransactionID,
                        OriginalTransactionAmount});
            ItemCount = ((string)(results[1]));
            QueryDataSize = ((string)(results[2]));
            QueryData = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void QueryTransactionTotalsAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionID, 
                    string TerminalID, 
                    string TransactionType, 
                    string TransactionStatus, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string SettlementDateBegin, 
                    string SettlementDateEnd, 
                    string ParentTransactionID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ApprovalNumber, 
                    string ClientIPAddress, 
                    string OriginalTransactionID, 
                    string OriginalTransactionAmount) {
            this.QueryTransactionTotalsAsync(StoreID, StoreKey, ApplicationID, DeliveryMethod, TransactionID, TerminalID, TransactionType, TransactionStatus, TransactionDateBegin, TransactionDateEnd, TransactionTimeBegin, TransactionTimeEnd, SettlementDateBegin, SettlementDateEnd, ParentTransactionID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, CashBackAmount, Currency, AccountNumber, ExpirationMonth, ExpirationYear, RoutingNumber, CheckNumber, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, ApprovalNumber, ClientIPAddress, OriginalTransactionID, OriginalTransactionAmount, null);
        }
        
        /// <remarks/>
        public void QueryTransactionTotalsAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionID, 
                    string TerminalID, 
                    string TransactionType, 
                    string TransactionStatus, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string SettlementDateBegin, 
                    string SettlementDateEnd, 
                    string ParentTransactionID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ApprovalNumber, 
                    string ClientIPAddress, 
                    string OriginalTransactionID, 
                    string OriginalTransactionAmount, 
                    object userState) {
            if ((this.QueryTransactionTotalsOperationCompleted == null)) {
                this.QueryTransactionTotalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryTransactionTotalsOperationCompleted);
            }
            this.InvokeAsync("QueryTransactionTotals", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        TransactionID,
                        TerminalID,
                        TransactionType,
                        TransactionStatus,
                        TransactionDateBegin,
                        TransactionDateEnd,
                        TransactionTimeBegin,
                        TransactionTimeEnd,
                        SettlementDateBegin,
                        SettlementDateEnd,
                        ParentTransactionID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        CashBackAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        RoutingNumber,
                        CheckNumber,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ApprovalNumber,
                        ClientIPAddress,
                        OriginalTransactionID,
                        OriginalTransactionAmount}, this.QueryTransactionTotalsOperationCompleted, userState);
        }
        
        private void OnQueryTransactionTotalsOperationCompleted(object arg) {
            if ((this.QueryTransactionTotalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryTransactionTotalsCompleted(this, new QueryTransactionTotalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.QueryTransactions", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int QueryTransactions(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionID, 
                    string TerminalID, 
                    string TransactionType, 
                    string TransactionStatus, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string SettlementDateBegin, 
                    string SettlementDateEnd, 
                    string ParentTransactionID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ApprovalNumber, 
                    string ClientIPAddress, 
                    string OriginalTransactionID, 
                    string OriginalTransactionAmount, 
                    out string ItemCount, 
                    out string QueryDataSize, 
                    out string QueryData) {
            object[] results = this.Invoke("QueryTransactions", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        TransactionID,
                        TerminalID,
                        TransactionType,
                        TransactionStatus,
                        TransactionDateBegin,
                        TransactionDateEnd,
                        TransactionTimeBegin,
                        TransactionTimeEnd,
                        SettlementDateBegin,
                        SettlementDateEnd,
                        ParentTransactionID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        CashBackAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        RoutingNumber,
                        CheckNumber,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ApprovalNumber,
                        ClientIPAddress,
                        OriginalTransactionID,
                        OriginalTransactionAmount});
            ItemCount = ((string)(results[1]));
            QueryDataSize = ((string)(results[2]));
            QueryData = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void QueryTransactionsAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionID, 
                    string TerminalID, 
                    string TransactionType, 
                    string TransactionStatus, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string SettlementDateBegin, 
                    string SettlementDateEnd, 
                    string ParentTransactionID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ApprovalNumber, 
                    string ClientIPAddress, 
                    string OriginalTransactionID, 
                    string OriginalTransactionAmount) {
            this.QueryTransactionsAsync(StoreID, StoreKey, ApplicationID, DeliveryMethod, TransactionID, TerminalID, TransactionType, TransactionStatus, TransactionDateBegin, TransactionDateEnd, TransactionTimeBegin, TransactionTimeEnd, SettlementDateBegin, SettlementDateEnd, ParentTransactionID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, CashBackAmount, Currency, AccountNumber, ExpirationMonth, ExpirationYear, RoutingNumber, CheckNumber, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, ApprovalNumber, ClientIPAddress, OriginalTransactionID, OriginalTransactionAmount, null);
        }
        
        /// <remarks/>
        public void QueryTransactionsAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string DeliveryMethod, 
                    string TransactionID, 
                    string TerminalID, 
                    string TransactionType, 
                    string TransactionStatus, 
                    string TransactionDateBegin, 
                    string TransactionDateEnd, 
                    string TransactionTimeBegin, 
                    string TransactionTimeEnd, 
                    string SettlementDateBegin, 
                    string SettlementDateEnd, 
                    string ParentTransactionID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ApprovalNumber, 
                    string ClientIPAddress, 
                    string OriginalTransactionID, 
                    string OriginalTransactionAmount, 
                    object userState) {
            if ((this.QueryTransactionsOperationCompleted == null)) {
                this.QueryTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryTransactionsOperationCompleted);
            }
            this.InvokeAsync("QueryTransactions", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        DeliveryMethod,
                        TransactionID,
                        TerminalID,
                        TransactionType,
                        TransactionStatus,
                        TransactionDateBegin,
                        TransactionDateEnd,
                        TransactionTimeBegin,
                        TransactionTimeEnd,
                        SettlementDateBegin,
                        SettlementDateEnd,
                        ParentTransactionID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        CashBackAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        RoutingNumber,
                        CheckNumber,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ApprovalNumber,
                        ClientIPAddress,
                        OriginalTransactionID,
                        OriginalTransactionAmount}, this.QueryTransactionsOperationCompleted, userState);
        }
        
        private void OnQueryTransactionsOperationCompleted(object arg) {
            if ((this.QueryTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryTransactionsCompleted(this, new QueryTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.GetSettlementTotals", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int GetSettlementTotals(string StoreID, string StoreKey, string ApplicationID, string SettlementDate, out string ResultCode, out string ResultMessage, out string SettledAmount, out string DetailedTotals) {
            object[] results = this.Invoke("GetSettlementTotals", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        SettlementDate});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            SettledAmount = ((string)(results[3]));
            DetailedTotals = ((string)(results[4]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSettlementTotalsAsync(string StoreID, string StoreKey, string ApplicationID, string SettlementDate) {
            this.GetSettlementTotalsAsync(StoreID, StoreKey, ApplicationID, SettlementDate, null);
        }
        
        /// <remarks/>
        public void GetSettlementTotalsAsync(string StoreID, string StoreKey, string ApplicationID, string SettlementDate, object userState) {
            if ((this.GetSettlementTotalsOperationCompleted == null)) {
                this.GetSettlementTotalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSettlementTotalsOperationCompleted);
            }
            this.InvokeAsync("GetSettlementTotals", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        SettlementDate}, this.GetSettlementTotalsOperationCompleted, userState);
        }
        
        private void OnGetSettlementTotalsOperationCompleted(object arg) {
            if ((this.GetSettlementTotalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSettlementTotalsCompleted(this, new GetSettlementTotalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.GetProcessorTotals", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int GetProcessorTotals(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ActivityPeriod, out string ResultCode, out string ResultMessage, out string ProcessedAmount, out string DetailedTotals) {
            object[] results = this.Invoke("GetProcessorTotals", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ActivityPeriod});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            ProcessedAmount = ((string)(results[3]));
            DetailedTotals = ((string)(results[4]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessorTotalsAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ActivityPeriod) {
            this.GetProcessorTotalsAsync(StoreID, StoreKey, ApplicationID, TerminalID, ActivityPeriod, null);
        }
        
        /// <remarks/>
        public void GetProcessorTotalsAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ActivityPeriod, object userState) {
            if ((this.GetProcessorTotalsOperationCompleted == null)) {
                this.GetProcessorTotalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessorTotalsOperationCompleted);
            }
            this.InvokeAsync("GetProcessorTotals", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ActivityPeriod}, this.GetProcessorTotalsOperationCompleted, userState);
        }
        
        private void OnGetProcessorTotalsOperationCompleted(object arg) {
            if ((this.GetProcessorTotalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessorTotalsCompleted(this, new GetProcessorTotalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.TimeOutReversal", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int TimeOutReversal(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string TransactionAmount, out string ResultCode, out string ResultMessage) {
            object[] results = this.Invoke("TimeOutReversal", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        TransactionAmount});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TimeOutReversalAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string TransactionAmount) {
            this.TimeOutReversalAsync(StoreID, StoreKey, ApplicationID, ReferenceNumber, TransactionAmount, null);
        }
        
        /// <remarks/>
        public void TimeOutReversalAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string TransactionAmount, object userState) {
            if ((this.TimeOutReversalOperationCompleted == null)) {
                this.TimeOutReversalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTimeOutReversalOperationCompleted);
            }
            this.InvokeAsync("TimeOutReversal", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        TransactionAmount}, this.TimeOutReversalOperationCompleted, userState);
        }
        
        private void OnTimeOutReversalOperationCompleted(object arg) {
            if ((this.TimeOutReversalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TimeOutReversalCompleted(this, new TimeOutReversalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.VoidTransaction", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int VoidTransaction(string StoreID, string StoreKey, string ApplicationID, string TransactionID, out string ResultCode, out string ResultMessage) {
            object[] results = this.Invoke("VoidTransaction", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TransactionID});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void VoidTransactionAsync(string StoreID, string StoreKey, string ApplicationID, string TransactionID) {
            this.VoidTransactionAsync(StoreID, StoreKey, ApplicationID, TransactionID, null);
        }
        
        /// <remarks/>
        public void VoidTransactionAsync(string StoreID, string StoreKey, string ApplicationID, string TransactionID, object userState) {
            if ((this.VoidTransactionOperationCompleted == null)) {
                this.VoidTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoidTransactionOperationCompleted);
            }
            this.InvokeAsync("VoidTransaction", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TransactionID}, this.VoidTransactionOperationCompleted, userState);
        }
        
        private void OnVoidTransactionOperationCompleted(object arg) {
            if ((this.VoidTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoidTransactionCompleted(this, new VoidTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.IdentityChek", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int IdentityChek(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string ReferenceNumber, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string NameSuffix, 
                    string BusinessName, 
                    string FirstAddress, 
                    string FirstCity, 
                    string FirstState, 
                    string FirstPostalCode, 
                    string FirstCountry, 
                    string SecondAddress, 
                    string SecondCity, 
                    string SecondState, 
                    string SecondPostalCode, 
                    string SecondCountry, 
                    string HomePhoneNumber, 
                    string WorkPhoneNumber, 
                    string TaxIDNumber, 
                    string AlienRegistrationNumber, 
                    string CountryOfCitizenship, 
                    string IdentificationType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string IdentificationCountry, 
                    string BirthDate, 
                    string BirthCity, 
                    string BirthState, 
                    string BirthCountry, 
                    string Gender, 
                    string OriginalInquiryNumber, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string InquiryNumber, 
                    out string TaxIDNumberStartDate, 
                    out string TaxIDNumberEndDate, 
                    out string IdentificationStartDate, 
                    out string IdentificationEndDate, 
                    out string VerifyParameters, 
                    out string VerifyAlerts, 
                    out string ResendParameters, 
                    out string ResendTries, 
                    out string MaxTriesExceeded, 
                    out string WarningFlags) {
            object[] results = this.Invoke("IdentityChek", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        ClerkNumber,
                        FirstName,
                        MiddleName,
                        LastName,
                        NameSuffix,
                        BusinessName,
                        FirstAddress,
                        FirstCity,
                        FirstState,
                        FirstPostalCode,
                        FirstCountry,
                        SecondAddress,
                        SecondCity,
                        SecondState,
                        SecondPostalCode,
                        SecondCountry,
                        HomePhoneNumber,
                        WorkPhoneNumber,
                        TaxIDNumber,
                        AlienRegistrationNumber,
                        CountryOfCitizenship,
                        IdentificationType,
                        IdentificationNumber,
                        IdentificationState,
                        IdentificationCountry,
                        BirthDate,
                        BirthCity,
                        BirthState,
                        BirthCountry,
                        Gender,
                        OriginalInquiryNumber});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            InquiryNumber = ((string)(results[6]));
            TaxIDNumberStartDate = ((string)(results[7]));
            TaxIDNumberEndDate = ((string)(results[8]));
            IdentificationStartDate = ((string)(results[9]));
            IdentificationEndDate = ((string)(results[10]));
            VerifyParameters = ((string)(results[11]));
            VerifyAlerts = ((string)(results[12]));
            ResendParameters = ((string)(results[13]));
            ResendTries = ((string)(results[14]));
            MaxTriesExceeded = ((string)(results[15]));
            WarningFlags = ((string)(results[16]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void IdentityChekAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string ReferenceNumber, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string NameSuffix, 
                    string BusinessName, 
                    string FirstAddress, 
                    string FirstCity, 
                    string FirstState, 
                    string FirstPostalCode, 
                    string FirstCountry, 
                    string SecondAddress, 
                    string SecondCity, 
                    string SecondState, 
                    string SecondPostalCode, 
                    string SecondCountry, 
                    string HomePhoneNumber, 
                    string WorkPhoneNumber, 
                    string TaxIDNumber, 
                    string AlienRegistrationNumber, 
                    string CountryOfCitizenship, 
                    string IdentificationType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string IdentificationCountry, 
                    string BirthDate, 
                    string BirthCity, 
                    string BirthState, 
                    string BirthCountry, 
                    string Gender, 
                    string OriginalInquiryNumber) {
            this.IdentityChekAsync(StoreID, StoreKey, ApplicationID, ReferenceNumber, ClerkNumber, FirstName, MiddleName, LastName, NameSuffix, BusinessName, FirstAddress, FirstCity, FirstState, FirstPostalCode, FirstCountry, SecondAddress, SecondCity, SecondState, SecondPostalCode, SecondCountry, HomePhoneNumber, WorkPhoneNumber, TaxIDNumber, AlienRegistrationNumber, CountryOfCitizenship, IdentificationType, IdentificationNumber, IdentificationState, IdentificationCountry, BirthDate, BirthCity, BirthState, BirthCountry, Gender, OriginalInquiryNumber, null);
        }
        
        /// <remarks/>
        public void IdentityChekAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string ReferenceNumber, 
                    string ClerkNumber, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string NameSuffix, 
                    string BusinessName, 
                    string FirstAddress, 
                    string FirstCity, 
                    string FirstState, 
                    string FirstPostalCode, 
                    string FirstCountry, 
                    string SecondAddress, 
                    string SecondCity, 
                    string SecondState, 
                    string SecondPostalCode, 
                    string SecondCountry, 
                    string HomePhoneNumber, 
                    string WorkPhoneNumber, 
                    string TaxIDNumber, 
                    string AlienRegistrationNumber, 
                    string CountryOfCitizenship, 
                    string IdentificationType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string IdentificationCountry, 
                    string BirthDate, 
                    string BirthCity, 
                    string BirthState, 
                    string BirthCountry, 
                    string Gender, 
                    string OriginalInquiryNumber, 
                    object userState) {
            if ((this.IdentityChekOperationCompleted == null)) {
                this.IdentityChekOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIdentityChekOperationCompleted);
            }
            this.InvokeAsync("IdentityChek", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        ClerkNumber,
                        FirstName,
                        MiddleName,
                        LastName,
                        NameSuffix,
                        BusinessName,
                        FirstAddress,
                        FirstCity,
                        FirstState,
                        FirstPostalCode,
                        FirstCountry,
                        SecondAddress,
                        SecondCity,
                        SecondState,
                        SecondPostalCode,
                        SecondCountry,
                        HomePhoneNumber,
                        WorkPhoneNumber,
                        TaxIDNumber,
                        AlienRegistrationNumber,
                        CountryOfCitizenship,
                        IdentificationType,
                        IdentificationNumber,
                        IdentificationState,
                        IdentificationCountry,
                        BirthDate,
                        BirthCity,
                        BirthState,
                        BirthCountry,
                        Gender,
                        OriginalInquiryNumber}, this.IdentityChekOperationCompleted, userState);
        }
        
        private void OnIdentityChekOperationCompleted(object arg) {
            if ((this.IdentityChekCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IdentityChekCompleted(this, new IdentityChekCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.TeleCheckICARefund", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int TeleCheckICARefund(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress, out string ResultCode, out string ResultMessage, out string TransactionID, out string TransactionDate, out string TransactionTime) {
            object[] results = this.Invoke("TeleCheckICARefund", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        OriginalTransactionID,
                        OriginalTransactionAmount,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TeleCheckICARefundAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress) {
            this.TeleCheckICARefundAsync(StoreID, StoreKey, ApplicationID, ReferenceNumber, CashierNumber, TransactionAmount, OriginalTransactionID, OriginalTransactionAmount, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void TeleCheckICARefundAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress, object userState) {
            if ((this.TeleCheckICARefundOperationCompleted == null)) {
                this.TeleCheckICARefundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeleCheckICARefundOperationCompleted);
            }
            this.InvokeAsync("TeleCheckICARefund", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        OriginalTransactionID,
                        OriginalTransactionAmount,
                        ClientIPAddress}, this.TeleCheckICARefundOperationCompleted, userState);
        }
        
        private void OnTeleCheckICARefundOperationCompleted(object arg) {
            if ((this.TeleCheckICARefundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeleCheckICARefundCompleted(this, new TeleCheckICARefundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.TeleCheckICASettle", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int TeleCheckICASettle(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress, out string ResultCode, out string ResultMessage, out string TransactionID, out string TransactionDate, out string TransactionTime) {
            object[] results = this.Invoke("TeleCheckICASettle", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        OriginalTransactionID,
                        OriginalTransactionAmount,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TeleCheckICASettleAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress) {
            this.TeleCheckICASettleAsync(StoreID, StoreKey, ApplicationID, ReferenceNumber, CashierNumber, TransactionAmount, OriginalTransactionID, OriginalTransactionAmount, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void TeleCheckICASettleAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress, object userState) {
            if ((this.TeleCheckICASettleOperationCompleted == null)) {
                this.TeleCheckICASettleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeleCheckICASettleOperationCompleted);
            }
            this.InvokeAsync("TeleCheckICASettle", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        OriginalTransactionID,
                        OriginalTransactionAmount,
                        ClientIPAddress}, this.TeleCheckICASettleOperationCompleted, userState);
        }
        
        private void OnTeleCheckICASettleOperationCompleted(object arg) {
            if ((this.TeleCheckICASettleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeleCheckICASettleCompleted(this, new TeleCheckICASettleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.TeleCheckICAAuthorize", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int TeleCheckICAAuthorize(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string MICR, 
                    string CheckType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string TaxIDNumber, 
                    string AccountBusinessName, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string ExtendedResultMessage) {
            object[] results = this.Invoke("TeleCheckICAAuthorize", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        Currency,
                        AccountNumber,
                        RoutingNumber,
                        CheckNumber,
                        MICR,
                        CheckType,
                        IdentificationNumber,
                        IdentificationState,
                        TaxIDNumber,
                        AccountBusinessName,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            ExtendedResultMessage = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TeleCheckICAAuthorizeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string MICR, 
                    string CheckType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string TaxIDNumber, 
                    string AccountBusinessName, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress) {
            this.TeleCheckICAAuthorizeAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, Currency, AccountNumber, RoutingNumber, CheckNumber, MICR, CheckType, IdentificationNumber, IdentificationState, TaxIDNumber, AccountBusinessName, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void TeleCheckICAAuthorizeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string MICR, 
                    string CheckType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string TaxIDNumber, 
                    string AccountBusinessName, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.TeleCheckICAAuthorizeOperationCompleted == null)) {
                this.TeleCheckICAAuthorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeleCheckICAAuthorizeOperationCompleted);
            }
            this.InvokeAsync("TeleCheckICAAuthorize", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        Currency,
                        AccountNumber,
                        RoutingNumber,
                        CheckNumber,
                        MICR,
                        CheckType,
                        IdentificationNumber,
                        IdentificationState,
                        TaxIDNumber,
                        AccountBusinessName,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress}, this.TeleCheckICAAuthorizeOperationCompleted, userState);
        }
        
        private void OnTeleCheckICAAuthorizeOperationCompleted(object arg) {
            if ((this.TeleCheckICAAuthorizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeleCheckICAAuthorizeCompleted(this, new TeleCheckICAAuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.TeleCheckRiskManagement", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int TeleCheckRiskManagement(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string MICR, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string BirthDate, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("TeleCheckRiskManagement", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        Currency,
                        AccountNumber,
                        RoutingNumber,
                        CheckNumber,
                        MICR,
                        IdentificationNumber,
                        IdentificationState,
                        BirthDate});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            TransactionDate = ((string)(results[5]));
            TransactionTime = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TeleCheckRiskManagementAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string Currency, string AccountNumber, string RoutingNumber, string CheckNumber, string MICR, string IdentificationNumber, string IdentificationState, string BirthDate) {
            this.TeleCheckRiskManagementAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, Currency, AccountNumber, RoutingNumber, CheckNumber, MICR, IdentificationNumber, IdentificationState, BirthDate, null);
        }
        
        /// <remarks/>
        public void TeleCheckRiskManagementAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string MICR, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string BirthDate, 
                    object userState) {
            if ((this.TeleCheckRiskManagementOperationCompleted == null)) {
                this.TeleCheckRiskManagementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeleCheckRiskManagementOperationCompleted);
            }
            this.InvokeAsync("TeleCheckRiskManagement", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        Currency,
                        AccountNumber,
                        RoutingNumber,
                        CheckNumber,
                        MICR,
                        IdentificationNumber,
                        IdentificationState,
                        BirthDate}, this.TeleCheckRiskManagementOperationCompleted, userState);
        }
        
        private void OnTeleCheckRiskManagementOperationCompleted(object arg) {
            if ((this.TeleCheckRiskManagementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeleCheckRiskManagementCompleted(this, new TeleCheckRiskManagementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.STARChekDirectDebit", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int STARChekDirectDebit(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string MICR, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("STARChekDirectDebit", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        Currency,
                        AccountNumber,
                        RoutingNumber,
                        CheckNumber,
                        MICR});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            TransactionDate = ((string)(results[5]));
            TransactionTime = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void STARChekDirectDebitAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string Currency, string AccountNumber, string RoutingNumber, string CheckNumber, string MICR) {
            this.STARChekDirectDebitAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, Currency, AccountNumber, RoutingNumber, CheckNumber, MICR, null);
        }
        
        /// <remarks/>
        public void STARChekDirectDebitAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string Currency, string AccountNumber, string RoutingNumber, string CheckNumber, string MICR, object userState) {
            if ((this.STARChekDirectDebitOperationCompleted == null)) {
                this.STARChekDirectDebitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSTARChekDirectDebitOperationCompleted);
            }
            this.InvokeAsync("STARChekDirectDebit", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        Currency,
                        AccountNumber,
                        RoutingNumber,
                        CheckNumber,
                        MICR}, this.STARChekDirectDebitOperationCompleted, userState);
        }
        
        private void OnSTARChekDirectDebitOperationCompleted(object arg) {
            if ((this.STARChekDirectDebitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.STARChekDirectDebitCompleted(this, new STARChekDirectDebitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.STARChekDirectVerify", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int STARChekDirectVerify(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string MICR, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("STARChekDirectVerify", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        Currency,
                        AccountNumber,
                        RoutingNumber,
                        CheckNumber,
                        MICR});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            TransactionDate = ((string)(results[5]));
            TransactionTime = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void STARChekDirectVerifyAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string Currency, string AccountNumber, string RoutingNumber, string CheckNumber, string MICR) {
            this.STARChekDirectVerifyAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, Currency, AccountNumber, RoutingNumber, CheckNumber, MICR, null);
        }
        
        /// <remarks/>
        public void STARChekDirectVerifyAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string Currency, string AccountNumber, string RoutingNumber, string CheckNumber, string MICR, object userState) {
            if ((this.STARChekDirectVerifyOperationCompleted == null)) {
                this.STARChekDirectVerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSTARChekDirectVerifyOperationCompleted);
            }
            this.InvokeAsync("STARChekDirectVerify", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        Currency,
                        AccountNumber,
                        RoutingNumber,
                        CheckNumber,
                        MICR}, this.STARChekDirectVerifyOperationCompleted, userState);
        }
        
        private void OnSTARChekDirectVerifyOperationCompleted(object arg) {
            if ((this.STARChekDirectVerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.STARChekDirectVerifyCompleted(this, new STARChekDirectVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.FIAccountVerification", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int FIAccountVerification(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string PCTranCode, 
                    string AccountFirstName, 
                    string AccountMiddleName, 
                    string AccountLastName, 
                    string AccountBusinessName, 
                    string AccountAddress, 
                    string AccountCity, 
                    string AccountState, 
                    string AccountPostalCode, 
                    string AccountCountry, 
                    string AccountEmail, 
                    string AccountHomePhone, 
                    string AccountWorkPhone, 
                    string AccountTaxIDNumber, 
                    string AccountBirthDate, 
                    string IdentificationType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string IdentificationCountry, 
                    string IdentificationIssueDate, 
                    string IdentificationExpirationDate, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string NonParticipantFlag, 
                    out string AccountStatusCodes, 
                    out string AccountVerificationFlags) {
            object[] results = this.Invoke("FIAccountVerification", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        Currency,
                        AccountNumber,
                        RoutingNumber,
                        CheckNumber,
                        PCTranCode,
                        AccountFirstName,
                        AccountMiddleName,
                        AccountLastName,
                        AccountBusinessName,
                        AccountAddress,
                        AccountCity,
                        AccountState,
                        AccountPostalCode,
                        AccountCountry,
                        AccountEmail,
                        AccountHomePhone,
                        AccountWorkPhone,
                        AccountTaxIDNumber,
                        AccountBirthDate,
                        IdentificationType,
                        IdentificationNumber,
                        IdentificationState,
                        IdentificationCountry,
                        IdentificationIssueDate,
                        IdentificationExpirationDate});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            NonParticipantFlag = ((string)(results[6]));
            AccountStatusCodes = ((string)(results[7]));
            AccountVerificationFlags = ((string)(results[8]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void FIAccountVerificationAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string PCTranCode, 
                    string AccountFirstName, 
                    string AccountMiddleName, 
                    string AccountLastName, 
                    string AccountBusinessName, 
                    string AccountAddress, 
                    string AccountCity, 
                    string AccountState, 
                    string AccountPostalCode, 
                    string AccountCountry, 
                    string AccountEmail, 
                    string AccountHomePhone, 
                    string AccountWorkPhone, 
                    string AccountTaxIDNumber, 
                    string AccountBirthDate, 
                    string IdentificationType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string IdentificationCountry, 
                    string IdentificationIssueDate, 
                    string IdentificationExpirationDate) {
            this.FIAccountVerificationAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, Currency, AccountNumber, RoutingNumber, CheckNumber, PCTranCode, AccountFirstName, AccountMiddleName, AccountLastName, AccountBusinessName, AccountAddress, AccountCity, AccountState, AccountPostalCode, AccountCountry, AccountEmail, AccountHomePhone, AccountWorkPhone, AccountTaxIDNumber, AccountBirthDate, IdentificationType, IdentificationNumber, IdentificationState, IdentificationCountry, IdentificationIssueDate, IdentificationExpirationDate, null);
        }
        
        /// <remarks/>
        public void FIAccountVerificationAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string PCTranCode, 
                    string AccountFirstName, 
                    string AccountMiddleName, 
                    string AccountLastName, 
                    string AccountBusinessName, 
                    string AccountAddress, 
                    string AccountCity, 
                    string AccountState, 
                    string AccountPostalCode, 
                    string AccountCountry, 
                    string AccountEmail, 
                    string AccountHomePhone, 
                    string AccountWorkPhone, 
                    string AccountTaxIDNumber, 
                    string AccountBirthDate, 
                    string IdentificationType, 
                    string IdentificationNumber, 
                    string IdentificationState, 
                    string IdentificationCountry, 
                    string IdentificationIssueDate, 
                    string IdentificationExpirationDate, 
                    object userState) {
            if ((this.FIAccountVerificationOperationCompleted == null)) {
                this.FIAccountVerificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFIAccountVerificationOperationCompleted);
            }
            this.InvokeAsync("FIAccountVerification", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        Currency,
                        AccountNumber,
                        RoutingNumber,
                        CheckNumber,
                        PCTranCode,
                        AccountFirstName,
                        AccountMiddleName,
                        AccountLastName,
                        AccountBusinessName,
                        AccountAddress,
                        AccountCity,
                        AccountState,
                        AccountPostalCode,
                        AccountCountry,
                        AccountEmail,
                        AccountHomePhone,
                        AccountWorkPhone,
                        AccountTaxIDNumber,
                        AccountBirthDate,
                        IdentificationType,
                        IdentificationNumber,
                        IdentificationState,
                        IdentificationCountry,
                        IdentificationIssueDate,
                        IdentificationExpirationDate}, this.FIAccountVerificationOperationCompleted, userState);
        }
        
        private void OnFIAccountVerificationOperationCompleted(object arg) {
            if ((this.FIAccountVerificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FIAccountVerificationCompleted(this, new FIAccountVerificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.STARChek", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int STARChek(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string RoutingNumber, 
                    string CheckNumber, 
                    string MICR, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("STARChek", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        Currency,
                        AccountNumber,
                        RoutingNumber,
                        CheckNumber,
                        MICR});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void STARChekAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string Currency, string AccountNumber, string RoutingNumber, string CheckNumber, string MICR) {
            this.STARChekAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, Currency, AccountNumber, RoutingNumber, CheckNumber, MICR, null);
        }
        
        /// <remarks/>
        public void STARChekAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string Currency, string AccountNumber, string RoutingNumber, string CheckNumber, string MICR, object userState) {
            if ((this.STARChekOperationCompleted == null)) {
                this.STARChekOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSTARChekOperationCompleted);
            }
            this.InvokeAsync("STARChek", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        Currency,
                        AccountNumber,
                        RoutingNumber,
                        CheckNumber,
                        MICR}, this.STARChekOperationCompleted, userState);
        }
        
        private void OnSTARChekOperationCompleted(object arg) {
            if ((this.STARChekCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.STARChekCompleted(this, new STARChekCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.GiftCardDeactivate", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int GiftCardDeactivate(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string BalanceAmount) {
            object[] results = this.Invoke("GiftCardDeactivate", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            BalanceAmount = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardDeactivateAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track1, string Track2) {
            this.GiftCardDeactivateAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, AccountNumber, ExpirationMonth, ExpirationYear, Track1, Track2, null);
        }
        
        /// <remarks/>
        public void GiftCardDeactivateAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track1, string Track2, object userState) {
            if ((this.GiftCardDeactivateOperationCompleted == null)) {
                this.GiftCardDeactivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardDeactivateOperationCompleted);
            }
            this.InvokeAsync("GiftCardDeactivate", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2}, this.GiftCardDeactivateOperationCompleted, userState);
        }
        
        private void OnGiftCardDeactivateOperationCompleted(object arg) {
            if ((this.GiftCardDeactivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardDeactivateCompleted(this, new GiftCardDeactivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.GiftCardActivate", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int GiftCardActivate(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string BalanceAmount) {
            object[] results = this.Invoke("GiftCardActivate", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            BalanceAmount = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardActivateAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track1, string Track2) {
            this.GiftCardActivateAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, AccountNumber, ExpirationMonth, ExpirationYear, Track1, Track2, null);
        }
        
        /// <remarks/>
        public void GiftCardActivateAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track1, string Track2, object userState) {
            if ((this.GiftCardActivateOperationCompleted == null)) {
                this.GiftCardActivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardActivateOperationCompleted);
            }
            this.InvokeAsync("GiftCardActivate", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2}, this.GiftCardActivateOperationCompleted, userState);
        }
        
        private void OnGiftCardActivateOperationCompleted(object arg) {
            if ((this.GiftCardActivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardActivateCompleted(this, new GiftCardActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.GiftCardBalanceIncrease", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int GiftCardBalanceIncrease(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string BalanceAmount) {
            object[] results = this.Invoke("GiftCardBalanceIncrease", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            BalanceAmount = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardBalanceIncreaseAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track1, string Track2) {
            this.GiftCardBalanceIncreaseAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, AccountNumber, ExpirationMonth, ExpirationYear, Track1, Track2, null);
        }
        
        /// <remarks/>
        public void GiftCardBalanceIncreaseAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track1, string Track2, object userState) {
            if ((this.GiftCardBalanceIncreaseOperationCompleted == null)) {
                this.GiftCardBalanceIncreaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardBalanceIncreaseOperationCompleted);
            }
            this.InvokeAsync("GiftCardBalanceIncrease", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2}, this.GiftCardBalanceIncreaseOperationCompleted, userState);
        }
        
        private void OnGiftCardBalanceIncreaseOperationCompleted(object arg) {
            if ((this.GiftCardBalanceIncreaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardBalanceIncreaseCompleted(this, new GiftCardBalanceIncreaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.GiftCardBalanceInquiry", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int GiftCardBalanceInquiry(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string CashierNumber, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string BalanceAmount) {
            object[] results = this.Invoke("GiftCardBalanceInquiry", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        CashierNumber,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            BalanceAmount = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardBalanceInquiryAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string CashierNumber, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track1, string Track2, string ClientIPAddress) {
            this.GiftCardBalanceInquiryAsync(StoreID, StoreKey, ApplicationID, TerminalID, CashierNumber, AccountNumber, ExpirationMonth, ExpirationYear, Track1, Track2, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void GiftCardBalanceInquiryAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string CashierNumber, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track1, string Track2, string ClientIPAddress, object userState) {
            if ((this.GiftCardBalanceInquiryOperationCompleted == null)) {
                this.GiftCardBalanceInquiryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardBalanceInquiryOperationCompleted);
            }
            this.InvokeAsync("GiftCardBalanceInquiry", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        CashierNumber,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        ClientIPAddress}, this.GiftCardBalanceInquiryOperationCompleted, userState);
        }
        
        private void OnGiftCardBalanceInquiryOperationCompleted(object arg) {
            if ((this.GiftCardBalanceInquiryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardBalanceInquiryCompleted(this, new GiftCardBalanceInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.GiftCardCredit", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int GiftCardCredit(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string BalanceAmount) {
            object[] results = this.Invoke("GiftCardCredit", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            BalanceAmount = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardCreditAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ClientIPAddress) {
            this.GiftCardCreditAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, AccountNumber, ExpirationMonth, ExpirationYear, Track1, Track2, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void GiftCardCreditAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.GiftCardCreditOperationCompleted == null)) {
                this.GiftCardCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardCreditOperationCompleted);
            }
            this.InvokeAsync("GiftCardCredit", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ClientIPAddress}, this.GiftCardCreditOperationCompleted, userState);
        }
        
        private void OnGiftCardCreditOperationCompleted(object arg) {
            if ((this.GiftCardCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardCreditCompleted(this, new GiftCardCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.GiftCardRefund", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int GiftCardRefund(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string OriginalTransactionID, 
                    string OriginalTransactionAmount, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string BalanceAmount) {
            object[] results = this.Invoke("GiftCardRefund", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        OriginalTransactionID,
                        OriginalTransactionAmount,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            BalanceAmount = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardRefundAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string SalesTaxAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress) {
            this.GiftCardRefundAsync(StoreID, StoreKey, ApplicationID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, OriginalTransactionID, OriginalTransactionAmount, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void GiftCardRefundAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string SalesTaxAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress, object userState) {
            if ((this.GiftCardRefundOperationCompleted == null)) {
                this.GiftCardRefundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardRefundOperationCompleted);
            }
            this.InvokeAsync("GiftCardRefund", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        OriginalTransactionID,
                        OriginalTransactionAmount,
                        ClientIPAddress}, this.GiftCardRefundOperationCompleted, userState);
        }
        
        private void OnGiftCardRefundOperationCompleted(object arg) {
            if ((this.GiftCardRefundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardRefundCompleted(this, new GiftCardRefundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.GiftCardCapture", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int GiftCardCapture(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string AuthorizationNumber, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string BalanceAmount) {
            object[] results = this.Invoke("GiftCardCapture", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        AuthorizationNumber,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            BalanceAmount = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardCaptureAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string AuthorizationNumber, 
                    string ClientIPAddress) {
            this.GiftCardCaptureAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, AccountNumber, ExpirationMonth, ExpirationYear, Track1, Track2, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, AuthorizationNumber, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void GiftCardCaptureAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string AuthorizationNumber, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.GiftCardCaptureOperationCompleted == null)) {
                this.GiftCardCaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardCaptureOperationCompleted);
            }
            this.InvokeAsync("GiftCardCapture", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        AuthorizationNumber,
                        ClientIPAddress}, this.GiftCardCaptureOperationCompleted, userState);
        }
        
        private void OnGiftCardCaptureOperationCompleted(object arg) {
            if ((this.GiftCardCaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardCaptureCompleted(this, new GiftCardCaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.GiftCardSettle", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int GiftCardSettle(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string OriginalTransactionID, 
                    string OriginalTransactionAmount, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string BalanceAmount) {
            object[] results = this.Invoke("GiftCardSettle", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        OriginalTransactionID,
                        OriginalTransactionAmount,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            BalanceAmount = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardSettleAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string SalesTaxAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress) {
            this.GiftCardSettleAsync(StoreID, StoreKey, ApplicationID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, OriginalTransactionID, OriginalTransactionAmount, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void GiftCardSettleAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string SalesTaxAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress, object userState) {
            if ((this.GiftCardSettleOperationCompleted == null)) {
                this.GiftCardSettleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardSettleOperationCompleted);
            }
            this.InvokeAsync("GiftCardSettle", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        OriginalTransactionID,
                        OriginalTransactionAmount,
                        ClientIPAddress}, this.GiftCardSettleOperationCompleted, userState);
        }
        
        private void OnGiftCardSettleOperationCompleted(object arg) {
            if ((this.GiftCardSettleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardSettleCompleted(this, new GiftCardSettleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.GiftCardAuthorize", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int GiftCardAuthorize(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string AuthorizationNumber, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string BalanceAmount, 
                    out string ApprovedAmount) {
            object[] results = this.Invoke("GiftCardAuthorize", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            AuthorizationNumber = ((string)(results[5]));
            TransactionDate = ((string)(results[6]));
            TransactionTime = ((string)(results[7]));
            BalanceAmount = ((string)(results[8]));
            ApprovedAmount = ((string)(results[9]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardAuthorizeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress) {
            this.GiftCardAuthorizeAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, AccountNumber, ExpirationMonth, ExpirationYear, Track1, Track2, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void GiftCardAuthorizeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.GiftCardAuthorizeOperationCompleted == null)) {
                this.GiftCardAuthorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardAuthorizeOperationCompleted);
            }
            this.InvokeAsync("GiftCardAuthorize", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress}, this.GiftCardAuthorizeOperationCompleted, userState);
        }
        
        private void OnGiftCardAuthorizeOperationCompleted(object arg) {
            if ((this.GiftCardAuthorizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardAuthorizeCompleted(this, new GiftCardAuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.GiftCardCharge", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int GiftCardCharge(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string BalanceAmount) {
            object[] results = this.Invoke("GiftCardCharge", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            BalanceAmount = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardChargeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress) {
            this.GiftCardChargeAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, AccountNumber, ExpirationMonth, ExpirationYear, Track1, Track2, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void GiftCardChargeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.GiftCardChargeOperationCompleted == null)) {
                this.GiftCardChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardChargeOperationCompleted);
            }
            this.InvokeAsync("GiftCardCharge", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress}, this.GiftCardChargeOperationCompleted, userState);
        }
        
        private void OnGiftCardChargeOperationCompleted(object arg) {
            if ((this.GiftCardChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardChargeCompleted(this, new GiftCardChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.BenefitsBalanceInquiry", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int BenefitsBalanceInquiry(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string CashierNumber, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string FoodStampBalanceAmount, 
                    out string CashBenefitBalanceAmount) {
            object[] results = this.Invoke("BenefitsBalanceInquiry", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        CashierNumber,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track2,
                        PINData,
                        KeySerialNumber});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            FoodStampBalanceAmount = ((string)(results[6]));
            CashBenefitBalanceAmount = ((string)(results[7]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void BenefitsBalanceInquiryAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string CashierNumber, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track2, string PINData, string KeySerialNumber) {
            this.BenefitsBalanceInquiryAsync(StoreID, StoreKey, ApplicationID, TerminalID, CashierNumber, AccountNumber, ExpirationMonth, ExpirationYear, Track2, PINData, KeySerialNumber, null);
        }
        
        /// <remarks/>
        public void BenefitsBalanceInquiryAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string CashierNumber, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track2, string PINData, string KeySerialNumber, object userState) {
            if ((this.BenefitsBalanceInquiryOperationCompleted == null)) {
                this.BenefitsBalanceInquiryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBenefitsBalanceInquiryOperationCompleted);
            }
            this.InvokeAsync("BenefitsBalanceInquiry", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        CashierNumber,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track2,
                        PINData,
                        KeySerialNumber}, this.BenefitsBalanceInquiryOperationCompleted, userState);
        }
        
        private void OnBenefitsBalanceInquiryOperationCompleted(object arg) {
            if ((this.BenefitsBalanceInquiryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BenefitsBalanceInquiryCompleted(this, new BenefitsBalanceInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.CashBenefitCharge", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int CashBenefitCharge(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string CashBackAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string FoodStampBalanceAmount, 
                    out string CashBenefitBalanceAmount) {
            object[] results = this.Invoke("CashBenefitCharge", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        CashBackAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track2,
                        PINData,
                        KeySerialNumber});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            TransactionDate = ((string)(results[5]));
            TransactionTime = ((string)(results[6]));
            FoodStampBalanceAmount = ((string)(results[7]));
            CashBenefitBalanceAmount = ((string)(results[8]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CashBenefitChargeAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string CashBackAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track2, string PINData, string KeySerialNumber) {
            this.CashBenefitChargeAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, CashBackAmount, AccountNumber, ExpirationMonth, ExpirationYear, Track2, PINData, KeySerialNumber, null);
        }
        
        /// <remarks/>
        public void CashBenefitChargeAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string CashBackAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track2, string PINData, string KeySerialNumber, object userState) {
            if ((this.CashBenefitChargeOperationCompleted == null)) {
                this.CashBenefitChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCashBenefitChargeOperationCompleted);
            }
            this.InvokeAsync("CashBenefitCharge", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        CashBackAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track2,
                        PINData,
                        KeySerialNumber}, this.CashBenefitChargeOperationCompleted, userState);
        }
        
        private void OnCashBenefitChargeOperationCompleted(object arg) {
            if ((this.CashBenefitChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CashBenefitChargeCompleted(this, new CashBenefitChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.FoodStampVoucher", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int FoodStampVoucher(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string ApprovalNumber, 
                    string VoucherNumber, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("FoodStampVoucher", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        ApprovalNumber,
                        VoucherNumber});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void FoodStampVoucherAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string ApprovalNumber, string VoucherNumber) {
            this.FoodStampVoucherAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, AccountNumber, ExpirationMonth, ExpirationYear, ApprovalNumber, VoucherNumber, null);
        }
        
        /// <remarks/>
        public void FoodStampVoucherAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string ApprovalNumber, string VoucherNumber, object userState) {
            if ((this.FoodStampVoucherOperationCompleted == null)) {
                this.FoodStampVoucherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFoodStampVoucherOperationCompleted);
            }
            this.InvokeAsync("FoodStampVoucher", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        ApprovalNumber,
                        VoucherNumber}, this.FoodStampVoucherOperationCompleted, userState);
        }
        
        private void OnFoodStampVoucherOperationCompleted(object arg) {
            if ((this.FoodStampVoucherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FoodStampVoucherCompleted(this, new FoodStampVoucherCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.FoodStampCredit", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int FoodStampCredit(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string FoodStampBalanceAmount, 
                    out string CashBenefitBalanceAmount) {
            object[] results = this.Invoke("FoodStampCredit", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track2,
                        PINData,
                        KeySerialNumber});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            TransactionDate = ((string)(results[5]));
            TransactionTime = ((string)(results[6]));
            FoodStampBalanceAmount = ((string)(results[7]));
            CashBenefitBalanceAmount = ((string)(results[8]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void FoodStampCreditAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track2, string PINData, string KeySerialNumber) {
            this.FoodStampCreditAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, AccountNumber, ExpirationMonth, ExpirationYear, Track2, PINData, KeySerialNumber, null);
        }
        
        /// <remarks/>
        public void FoodStampCreditAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track2, string PINData, string KeySerialNumber, object userState) {
            if ((this.FoodStampCreditOperationCompleted == null)) {
                this.FoodStampCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFoodStampCreditOperationCompleted);
            }
            this.InvokeAsync("FoodStampCredit", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track2,
                        PINData,
                        KeySerialNumber}, this.FoodStampCreditOperationCompleted, userState);
        }
        
        private void OnFoodStampCreditOperationCompleted(object arg) {
            if ((this.FoodStampCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FoodStampCreditCompleted(this, new FoodStampCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.FoodStampCharge", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int FoodStampCharge(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string FoodStampBalanceAmount, 
                    out string CashBenefitBalanceAmount) {
            object[] results = this.Invoke("FoodStampCharge", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track2,
                        PINData,
                        KeySerialNumber});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            TransactionDate = ((string)(results[5]));
            TransactionTime = ((string)(results[6]));
            FoodStampBalanceAmount = ((string)(results[7]));
            CashBenefitBalanceAmount = ((string)(results[8]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void FoodStampChargeAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track2, string PINData, string KeySerialNumber) {
            this.FoodStampChargeAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, AccountNumber, ExpirationMonth, ExpirationYear, Track2, PINData, KeySerialNumber, null);
        }
        
        /// <remarks/>
        public void FoodStampChargeAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string AccountNumber, string ExpirationMonth, string ExpirationYear, string Track2, string PINData, string KeySerialNumber, object userState) {
            if ((this.FoodStampChargeOperationCompleted == null)) {
                this.FoodStampChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFoodStampChargeOperationCompleted);
            }
            this.InvokeAsync("FoodStampCharge", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track2,
                        PINData,
                        KeySerialNumber}, this.FoodStampChargeOperationCompleted, userState);
        }
        
        private void OnFoodStampChargeOperationCompleted(object arg) {
            if ((this.FoodStampChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FoodStampChargeCompleted(this, new FoodStampChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.DebitSessionKeyChange", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int DebitSessionKeyChange(string StoreID, string StoreKey, string ApplicationID, string TerminalID, out string ResultCode, out string ResultMessage, out string SessionKey) {
            object[] results = this.Invoke("DebitSessionKeyChange", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            SessionKey = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DebitSessionKeyChangeAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID) {
            this.DebitSessionKeyChangeAsync(StoreID, StoreKey, ApplicationID, TerminalID, null);
        }
        
        /// <remarks/>
        public void DebitSessionKeyChangeAsync(string StoreID, string StoreKey, string ApplicationID, string TerminalID, object userState) {
            if ((this.DebitSessionKeyChangeOperationCompleted == null)) {
                this.DebitSessionKeyChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDebitSessionKeyChangeOperationCompleted);
            }
            this.InvokeAsync("DebitSessionKeyChange", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID}, this.DebitSessionKeyChangeOperationCompleted, userState);
        }
        
        private void OnDebitSessionKeyChangeOperationCompleted(object arg) {
            if ((this.DebitSessionKeyChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DebitSessionKeyChangeCompleted(this, new DebitSessionKeyChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.DebitCardCredit", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int DebitCardCredit(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string Track1, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    string SignatureData, 
                    string SignatureAlgorithm, 
                    string PrivateData, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string AuthorizationNumber, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("DebitCardCredit", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        Track1,
                        Track2,
                        PINData,
                        KeySerialNumber,
                        SignatureData,
                        SignatureAlgorithm,
                        PrivateData,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            AuthorizationNumber = ((string)(results[5]));
            TransactionDate = ((string)(results[6]));
            TransactionTime = ((string)(results[7]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DebitCardCreditAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string Track1, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    string SignatureData, 
                    string SignatureAlgorithm, 
                    string PrivateData, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ClientIPAddress) {
            this.DebitCardCreditAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, Currency, AccountNumber, Track1, Track2, PINData, KeySerialNumber, SignatureData, SignatureAlgorithm, PrivateData, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void DebitCardCreditAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string Track1, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    string SignatureData, 
                    string SignatureAlgorithm, 
                    string PrivateData, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.DebitCardCreditOperationCompleted == null)) {
                this.DebitCardCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDebitCardCreditOperationCompleted);
            }
            this.InvokeAsync("DebitCardCredit", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        Track1,
                        Track2,
                        PINData,
                        KeySerialNumber,
                        SignatureData,
                        SignatureAlgorithm,
                        PrivateData,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ClientIPAddress}, this.DebitCardCreditOperationCompleted, userState);
        }
        
        private void OnDebitCardCreditOperationCompleted(object arg) {
            if ((this.DebitCardCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DebitCardCreditCompleted(this, new DebitCardCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.DebitCardCapture", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int DebitCardCapture(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string Track1, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    string SignatureData, 
                    string SignatureAlgorithm, 
                    string PrivateData, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string AuthorizationNumber, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("DebitCardCapture", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        CashBackAmount,
                        Currency,
                        AccountNumber,
                        Track1,
                        Track2,
                        PINData,
                        KeySerialNumber,
                        SignatureData,
                        SignatureAlgorithm,
                        PrivateData,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        AuthorizationNumber,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DebitCardCaptureAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string Track1, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    string SignatureData, 
                    string SignatureAlgorithm, 
                    string PrivateData, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string AuthorizationNumber, 
                    string ClientIPAddress) {
            this.DebitCardCaptureAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, CashBackAmount, Currency, AccountNumber, Track1, Track2, PINData, KeySerialNumber, SignatureData, SignatureAlgorithm, PrivateData, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, AuthorizationNumber, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void DebitCardCaptureAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string Track1, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    string SignatureData, 
                    string SignatureAlgorithm, 
                    string PrivateData, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string AuthorizationNumber, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.DebitCardCaptureOperationCompleted == null)) {
                this.DebitCardCaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDebitCardCaptureOperationCompleted);
            }
            this.InvokeAsync("DebitCardCapture", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        CashBackAmount,
                        Currency,
                        AccountNumber,
                        Track1,
                        Track2,
                        PINData,
                        KeySerialNumber,
                        SignatureData,
                        SignatureAlgorithm,
                        PrivateData,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        AuthorizationNumber,
                        ClientIPAddress}, this.DebitCardCaptureOperationCompleted, userState);
        }
        
        private void OnDebitCardCaptureOperationCompleted(object arg) {
            if ((this.DebitCardCaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DebitCardCaptureCompleted(this, new DebitCardCaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.DebitCardAuthorize", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int DebitCardAuthorize(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string Track1, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    string SignatureData, 
                    string SignatureAlgorithm, 
                    string PrivateData, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string AuthorizationNumber, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string ApprovedAmount) {
            object[] results = this.Invoke("DebitCardAuthorize", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        CashBackAmount,
                        Currency,
                        AccountNumber,
                        Track1,
                        Track2,
                        PINData,
                        KeySerialNumber,
                        SignatureData,
                        SignatureAlgorithm,
                        PrivateData,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            AuthorizationNumber = ((string)(results[5]));
            TransactionDate = ((string)(results[6]));
            TransactionTime = ((string)(results[7]));
            ApprovedAmount = ((string)(results[8]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DebitCardAuthorizeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string Track1, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    string SignatureData, 
                    string SignatureAlgorithm, 
                    string PrivateData, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress) {
            this.DebitCardAuthorizeAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, CashBackAmount, Currency, AccountNumber, Track1, Track2, PINData, KeySerialNumber, SignatureData, SignatureAlgorithm, PrivateData, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void DebitCardAuthorizeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string Track1, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    string SignatureData, 
                    string SignatureAlgorithm, 
                    string PrivateData, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.DebitCardAuthorizeOperationCompleted == null)) {
                this.DebitCardAuthorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDebitCardAuthorizeOperationCompleted);
            }
            this.InvokeAsync("DebitCardAuthorize", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        CashBackAmount,
                        Currency,
                        AccountNumber,
                        Track1,
                        Track2,
                        PINData,
                        KeySerialNumber,
                        SignatureData,
                        SignatureAlgorithm,
                        PrivateData,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress}, this.DebitCardAuthorizeOperationCompleted, userState);
        }
        
        private void OnDebitCardAuthorizeOperationCompleted(object arg) {
            if ((this.DebitCardAuthorizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DebitCardAuthorizeCompleted(this, new DebitCardAuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.DebitCardChargePINless", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int DebitCardChargePINless(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string AuthorizationNumber, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("DebitCardChargePINless", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            AuthorizationNumber = ((string)(results[5]));
            TransactionDate = ((string)(results[6]));
            TransactionTime = ((string)(results[7]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DebitCardChargePINlessAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress) {
            this.DebitCardChargePINlessAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, Currency, AccountNumber, ExpirationMonth, ExpirationYear, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void DebitCardChargePINlessAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.DebitCardChargePINlessOperationCompleted == null)) {
                this.DebitCardChargePINlessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDebitCardChargePINlessOperationCompleted);
            }
            this.InvokeAsync("DebitCardChargePINless", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress}, this.DebitCardChargePINlessOperationCompleted, userState);
        }
        
        private void OnDebitCardChargePINlessOperationCompleted(object arg) {
            if ((this.DebitCardChargePINlessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DebitCardChargePINlessCompleted(this, new DebitCardChargePINlessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.DebitCardCharge", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int DebitCardCharge(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string Track1, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    string SignatureData, 
                    string SignatureAlgorithm, 
                    string PrivateData, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string AuthorizationNumber, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("DebitCardCharge", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        CashBackAmount,
                        Currency,
                        AccountNumber,
                        Track1,
                        Track2,
                        PINData,
                        KeySerialNumber,
                        SignatureData,
                        SignatureAlgorithm,
                        PrivateData,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            AuthorizationNumber = ((string)(results[5]));
            TransactionDate = ((string)(results[6]));
            TransactionTime = ((string)(results[7]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DebitCardChargeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string Track1, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    string SignatureData, 
                    string SignatureAlgorithm, 
                    string PrivateData, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress) {
            this.DebitCardChargeAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, CashBackAmount, Currency, AccountNumber, Track1, Track2, PINData, KeySerialNumber, SignatureData, SignatureAlgorithm, PrivateData, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void DebitCardChargeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string CashBackAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string Track1, 
                    string Track2, 
                    string PINData, 
                    string KeySerialNumber, 
                    string SignatureData, 
                    string SignatureAlgorithm, 
                    string PrivateData, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.DebitCardChargeOperationCompleted == null)) {
                this.DebitCardChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDebitCardChargeOperationCompleted);
            }
            this.InvokeAsync("DebitCardCharge", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        CashBackAmount,
                        Currency,
                        AccountNumber,
                        Track1,
                        Track2,
                        PINData,
                        KeySerialNumber,
                        SignatureData,
                        SignatureAlgorithm,
                        PrivateData,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress}, this.DebitCardChargeOperationCompleted, userState);
        }
        
        private void OnDebitCardChargeOperationCompleted(object arg) {
            if ((this.DebitCardChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DebitCardChargeCompleted(this, new DebitCardChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.CreditCardAddressVerify", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int CreditCardAddressVerify(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string AVSResponseCode, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("CreditCardAddressVerify", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            AVSResponseCode = ((string)(results[4]));
            TransactionDate = ((string)(results[5]));
            TransactionTime = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreditCardAddressVerifyAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ClientIPAddress) {
            this.CreditCardAddressVerifyAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, AccountNumber, ExpirationMonth, ExpirationYear, Track1, Track2, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void CreditCardAddressVerifyAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.CreditCardAddressVerifyOperationCompleted == null)) {
                this.CreditCardAddressVerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditCardAddressVerifyOperationCompleted);
            }
            this.InvokeAsync("CreditCardAddressVerify", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ClientIPAddress}, this.CreditCardAddressVerifyOperationCompleted, userState);
        }
        
        private void OnCreditCardAddressVerifyOperationCompleted(object arg) {
            if ((this.CreditCardAddressVerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditCardAddressVerifyCompleted(this, new CreditCardAddressVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.ProcessAuthenticationResponse", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int ProcessAuthenticationResponse(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TransactionID, 
                    string AuthenticationResponseToken, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string AVSResponseCode, 
                    out string CVVResponseCode, 
                    out string AuthenticationResponseCode, 
                    out string AuthenticationMethodName, 
                    out string AuthenticationMethodVersion, 
                    out string ApprovalNumber, 
                    out string AuthorizationNumber, 
                    out string TransactionDate, 
                    out string TransactionTime, 
                    out string ReferenceNumber, 
                    out string AccountNumber, 
                    out string TransactionAmount) {
            object[] results = this.Invoke("ProcessAuthenticationResponse", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TransactionID,
                        AuthenticationResponseToken});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            AVSResponseCode = ((string)(results[3]));
            CVVResponseCode = ((string)(results[4]));
            AuthenticationResponseCode = ((string)(results[5]));
            AuthenticationMethodName = ((string)(results[6]));
            AuthenticationMethodVersion = ((string)(results[7]));
            ApprovalNumber = ((string)(results[8]));
            AuthorizationNumber = ((string)(results[9]));
            TransactionDate = ((string)(results[10]));
            TransactionTime = ((string)(results[11]));
            ReferenceNumber = ((string)(results[12]));
            AccountNumber = ((string)(results[13]));
            TransactionAmount = ((string)(results[14]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAuthenticationResponseAsync(string StoreID, string StoreKey, string ApplicationID, string TransactionID, string AuthenticationResponseToken) {
            this.ProcessAuthenticationResponseAsync(StoreID, StoreKey, ApplicationID, TransactionID, AuthenticationResponseToken, null);
        }
        
        /// <remarks/>
        public void ProcessAuthenticationResponseAsync(string StoreID, string StoreKey, string ApplicationID, string TransactionID, string AuthenticationResponseToken, object userState) {
            if ((this.ProcessAuthenticationResponseOperationCompleted == null)) {
                this.ProcessAuthenticationResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAuthenticationResponseOperationCompleted);
            }
            this.InvokeAsync("ProcessAuthenticationResponse", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TransactionID,
                        AuthenticationResponseToken}, this.ProcessAuthenticationResponseOperationCompleted, userState);
        }
        
        private void OnProcessAuthenticationResponseOperationCompleted(object arg) {
            if ((this.ProcessAuthenticationResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAuthenticationResponseCompleted(this, new ProcessAuthenticationResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.CreditCardAuthorizeWithAuthentication", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int CreditCardAuthorizeWithAuthentication(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string CardVerificationValue, 
                    string Track1, 
                    string Track2, 
                    string AuthenticationResponseToken, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string AVSResponseCode, 
                    out string CVVResponseCode, 
                    out string AuthenticationResponseCode, 
                    out string AuthenticationMethodName, 
                    out string AuthenticationMethodVersion, 
                    out string AuthenticationRequestToken, 
                    out string AuthenticationServerURL, 
                    out string ApprovalNumber, 
                    out string AuthorizationNumber, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("CreditCardAuthorizeWithAuthentication", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        CardVerificationValue,
                        Track1,
                        Track2,
                        AuthenticationResponseToken,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            AVSResponseCode = ((string)(results[4]));
            CVVResponseCode = ((string)(results[5]));
            AuthenticationResponseCode = ((string)(results[6]));
            AuthenticationMethodName = ((string)(results[7]));
            AuthenticationMethodVersion = ((string)(results[8]));
            AuthenticationRequestToken = ((string)(results[9]));
            AuthenticationServerURL = ((string)(results[10]));
            ApprovalNumber = ((string)(results[11]));
            AuthorizationNumber = ((string)(results[12]));
            TransactionDate = ((string)(results[13]));
            TransactionTime = ((string)(results[14]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreditCardAuthorizeWithAuthenticationAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string CardVerificationValue, 
                    string Track1, 
                    string Track2, 
                    string AuthenticationResponseToken, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress) {
            this.CreditCardAuthorizeWithAuthenticationAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, Currency, AccountNumber, ExpirationMonth, ExpirationYear, CardVerificationValue, Track1, Track2, AuthenticationResponseToken, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void CreditCardAuthorizeWithAuthenticationAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string CardVerificationValue, 
                    string Track1, 
                    string Track2, 
                    string AuthenticationResponseToken, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.CreditCardAuthorizeWithAuthenticationOperationCompleted == null)) {
                this.CreditCardAuthorizeWithAuthenticationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditCardAuthorizeWithAuthenticationOperationCompleted);
            }
            this.InvokeAsync("CreditCardAuthorizeWithAuthentication", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        CardVerificationValue,
                        Track1,
                        Track2,
                        AuthenticationResponseToken,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress}, this.CreditCardAuthorizeWithAuthenticationOperationCompleted, userState);
        }
        
        private void OnCreditCardAuthorizeWithAuthenticationOperationCompleted(object arg) {
            if ((this.CreditCardAuthorizeWithAuthenticationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditCardAuthorizeWithAuthenticationCompleted(this, new CreditCardAuthorizeWithAuthenticationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.CreditCardVoiceAuthorize", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int CreditCardVoiceAuthorize(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string CardVerificationValue, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string AuthorizationNumber, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("CreditCardVoiceAuthorize", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        CardVerificationValue,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        AuthorizationNumber,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreditCardVoiceAuthorizeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string CardVerificationValue, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string AuthorizationNumber, 
                    string ClientIPAddress) {
            this.CreditCardVoiceAuthorizeAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, Currency, AccountNumber, ExpirationMonth, ExpirationYear, CardVerificationValue, Track1, Track2, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, AuthorizationNumber, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void CreditCardVoiceAuthorizeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string CardVerificationValue, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string AuthorizationNumber, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.CreditCardVoiceAuthorizeOperationCompleted == null)) {
                this.CreditCardVoiceAuthorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditCardVoiceAuthorizeOperationCompleted);
            }
            this.InvokeAsync("CreditCardVoiceAuthorize", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        CardVerificationValue,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        AuthorizationNumber,
                        ClientIPAddress}, this.CreditCardVoiceAuthorizeOperationCompleted, userState);
        }
        
        private void OnCreditCardVoiceAuthorizeOperationCompleted(object arg) {
            if ((this.CreditCardVoiceAuthorizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditCardVoiceAuthorizeCompleted(this, new CreditCardVoiceAuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.CreditCardCredit", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int CreditCardCredit(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("CreditCardCredit", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            TransactionDate = ((string)(results[5]));
            TransactionTime = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreditCardCreditAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ClientIPAddress) {
            this.CreditCardCreditAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, Currency, AccountNumber, ExpirationMonth, ExpirationYear, Track1, Track2, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void CreditCardCreditAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.CreditCardCreditOperationCompleted == null)) {
                this.CreditCardCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditCardCreditOperationCompleted);
            }
            this.InvokeAsync("CreditCardCredit", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ClientIPAddress}, this.CreditCardCreditOperationCompleted, userState);
        }
        
        private void OnCreditCardCreditOperationCompleted(object arg) {
            if ((this.CreditCardCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditCardCreditCompleted(this, new CreditCardCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.CreditCardRefund", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int CreditCardRefund(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string OriginalTransactionID, 
                    string OriginalTransactionAmount, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("CreditCardRefund", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        OriginalTransactionID,
                        OriginalTransactionAmount,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            TransactionDate = ((string)(results[5]));
            TransactionTime = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreditCardRefundAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string SalesTaxAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress) {
            this.CreditCardRefundAsync(StoreID, StoreKey, ApplicationID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, OriginalTransactionID, OriginalTransactionAmount, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void CreditCardRefundAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string SalesTaxAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress, object userState) {
            if ((this.CreditCardRefundOperationCompleted == null)) {
                this.CreditCardRefundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditCardRefundOperationCompleted);
            }
            this.InvokeAsync("CreditCardRefund", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        OriginalTransactionID,
                        OriginalTransactionAmount,
                        ClientIPAddress}, this.CreditCardRefundOperationCompleted, userState);
        }
        
        private void OnCreditCardRefundOperationCompleted(object arg) {
            if ((this.CreditCardRefundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditCardRefundCompleted(this, new CreditCardRefundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.CreditCardCapture", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int CreditCardCapture(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string AuthorizationNumber, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("CreditCardCapture", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        AuthorizationNumber,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            TransactionDate = ((string)(results[4]));
            TransactionTime = ((string)(results[5]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreditCardCaptureAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string AuthorizationNumber, 
                    string ClientIPAddress) {
            this.CreditCardCaptureAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, Currency, AccountNumber, ExpirationMonth, ExpirationYear, Track1, Track2, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, AuthorizationNumber, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void CreditCardCaptureAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string AuthorizationNumber, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.CreditCardCaptureOperationCompleted == null)) {
                this.CreditCardCaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditCardCaptureOperationCompleted);
            }
            this.InvokeAsync("CreditCardCapture", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        AuthorizationNumber,
                        ClientIPAddress}, this.CreditCardCaptureOperationCompleted, userState);
        }
        
        private void OnCreditCardCaptureOperationCompleted(object arg) {
            if ((this.CreditCardCaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditCardCaptureCompleted(this, new CreditCardCaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.CreditCardSettle", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int CreditCardSettle(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string OriginalTransactionID, 
                    string OriginalTransactionAmount, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string ApprovalNumber, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("CreditCardSettle", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        OriginalTransactionID,
                        OriginalTransactionAmount,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            ApprovalNumber = ((string)(results[4]));
            TransactionDate = ((string)(results[5]));
            TransactionTime = ((string)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreditCardSettleAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string SalesTaxAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress) {
            this.CreditCardSettleAsync(StoreID, StoreKey, ApplicationID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, OriginalTransactionID, OriginalTransactionAmount, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void CreditCardSettleAsync(string StoreID, string StoreKey, string ApplicationID, string ReferenceNumber, string CashierNumber, string TransactionAmount, string SalesTaxAmount, string OriginalTransactionID, string OriginalTransactionAmount, string ClientIPAddress, object userState) {
            if ((this.CreditCardSettleOperationCompleted == null)) {
                this.CreditCardSettleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditCardSettleOperationCompleted);
            }
            this.InvokeAsync("CreditCardSettle", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        OriginalTransactionID,
                        OriginalTransactionAmount,
                        ClientIPAddress}, this.CreditCardSettleOperationCompleted, userState);
        }
        
        private void OnCreditCardSettleOperationCompleted(object arg) {
            if ((this.CreditCardSettleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditCardSettleCompleted(this, new CreditCardSettleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.CreditCardCharge", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int CreditCardCharge(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string CardVerificationValue, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string AVSResponseCode, 
                    out string CVVResponseCode, 
                    out string ApprovalNumber, 
                    out string AuthorizationNumber, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("CreditCardCharge", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        CardVerificationValue,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            AVSResponseCode = ((string)(results[4]));
            CVVResponseCode = ((string)(results[5]));
            ApprovalNumber = ((string)(results[6]));
            AuthorizationNumber = ((string)(results[7]));
            TransactionDate = ((string)(results[8]));
            TransactionTime = ((string)(results[9]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreditCardChargeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string CardVerificationValue, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress) {
            this.CreditCardChargeAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, Currency, AccountNumber, ExpirationMonth, ExpirationYear, CardVerificationValue, Track1, Track2, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void CreditCardChargeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string CardVerificationValue, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.CreditCardChargeOperationCompleted == null)) {
                this.CreditCardChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditCardChargeOperationCompleted);
            }
            this.InvokeAsync("CreditCardCharge", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        CardVerificationValue,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress}, this.CreditCardChargeOperationCompleted, userState);
        }
        
        private void OnCreditCardChargeOperationCompleted(object arg) {
            if ((this.CreditCardChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditCardChargeCompleted(this, new CreditCardChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.CreditCardAuthorize", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int CreditCardAuthorize(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string CardVerificationValue, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    out string ResultCode, 
                    out string ResultMessage, 
                    out string TransactionID, 
                    out string AVSResponseCode, 
                    out string CVVResponseCode, 
                    out string ApprovalNumber, 
                    out string AuthorizationNumber, 
                    out string TransactionDate, 
                    out string TransactionTime) {
            object[] results = this.Invoke("CreditCardAuthorize", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        CardVerificationValue,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            TransactionID = ((string)(results[3]));
            AVSResponseCode = ((string)(results[4]));
            CVVResponseCode = ((string)(results[5]));
            ApprovalNumber = ((string)(results[6]));
            AuthorizationNumber = ((string)(results[7]));
            TransactionDate = ((string)(results[8]));
            TransactionTime = ((string)(results[9]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreditCardAuthorizeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string CardVerificationValue, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress) {
            this.CreditCardAuthorizeAsync(StoreID, StoreKey, ApplicationID, TerminalID, ReferenceNumber, CashierNumber, TransactionAmount, SalesTaxAmount, Currency, AccountNumber, ExpirationMonth, ExpirationYear, CardVerificationValue, Track1, Track2, BillingName, BillingAddress, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingPhone, BillingEmail, ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, ShippingPhone, ShippingEmail, ClientIPAddress, null);
        }
        
        /// <remarks/>
        public void CreditCardAuthorizeAsync(
                    string StoreID, 
                    string StoreKey, 
                    string ApplicationID, 
                    string TerminalID, 
                    string ReferenceNumber, 
                    string CashierNumber, 
                    string TransactionAmount, 
                    string SalesTaxAmount, 
                    string Currency, 
                    string AccountNumber, 
                    string ExpirationMonth, 
                    string ExpirationYear, 
                    string CardVerificationValue, 
                    string Track1, 
                    string Track2, 
                    string BillingName, 
                    string BillingAddress, 
                    string BillingCity, 
                    string BillingState, 
                    string BillingPostalCode, 
                    string BillingCountry, 
                    string BillingPhone, 
                    string BillingEmail, 
                    string ShippingName, 
                    string ShippingAddress, 
                    string ShippingCity, 
                    string ShippingState, 
                    string ShippingPostalCode, 
                    string ShippingCountry, 
                    string ShippingPhone, 
                    string ShippingEmail, 
                    string ClientIPAddress, 
                    object userState) {
            if ((this.CreditCardAuthorizeOperationCompleted == null)) {
                this.CreditCardAuthorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditCardAuthorizeOperationCompleted);
            }
            this.InvokeAsync("CreditCardAuthorize", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        TerminalID,
                        ReferenceNumber,
                        CashierNumber,
                        TransactionAmount,
                        SalesTaxAmount,
                        Currency,
                        AccountNumber,
                        ExpirationMonth,
                        ExpirationYear,
                        CardVerificationValue,
                        Track1,
                        Track2,
                        BillingName,
                        BillingAddress,
                        BillingCity,
                        BillingState,
                        BillingPostalCode,
                        BillingCountry,
                        BillingPhone,
                        BillingEmail,
                        ShippingName,
                        ShippingAddress,
                        ShippingCity,
                        ShippingState,
                        ShippingPostalCode,
                        ShippingCountry,
                        ShippingPhone,
                        ShippingEmail,
                        ClientIPAddress}, this.CreditCardAuthorizeOperationCompleted, userState);
        }
        
        private void OnCreditCardAuthorizeOperationCompleted(object arg) {
            if ((this.CreditCardAuthorizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditCardAuthorizeCompleted(this, new CreditCardAuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.RequestPassThrough", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int RequestPassThrough(string StoreID, string StoreKey, string ApplicationID, string RequestMessage, out string TransactionID, out string ReplyMessage) {
            object[] results = this.Invoke("RequestPassThrough", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        RequestMessage});
            TransactionID = ((string)(results[1]));
            ReplyMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RequestPassThroughAsync(string StoreID, string StoreKey, string ApplicationID, string RequestMessage) {
            this.RequestPassThroughAsync(StoreID, StoreKey, ApplicationID, RequestMessage, null);
        }
        
        /// <remarks/>
        public void RequestPassThroughAsync(string StoreID, string StoreKey, string ApplicationID, string RequestMessage, object userState) {
            if ((this.RequestPassThroughOperationCompleted == null)) {
                this.RequestPassThroughOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestPassThroughOperationCompleted);
            }
            this.InvokeAsync("RequestPassThrough", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID,
                        RequestMessage}, this.RequestPassThroughOperationCompleted, userState);
        }
        
        private void OnRequestPassThroughOperationCompleted(object arg) {
            if ((this.RequestPassThroughCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestPassThroughCompleted(this, new RequestPassThroughCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/EFSnet.SystemCheck", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public int SystemCheck(string StoreID, string StoreKey, string ApplicationID, out string ResultCode, out string ResultMessage) {
            object[] results = this.Invoke("SystemCheck", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID});
            ResultCode = ((string)(results[1]));
            ResultMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SystemCheckAsync(string StoreID, string StoreKey, string ApplicationID) {
            this.SystemCheckAsync(StoreID, StoreKey, ApplicationID, null);
        }
        
        /// <remarks/>
        public void SystemCheckAsync(string StoreID, string StoreKey, string ApplicationID, object userState) {
            if ((this.SystemCheckOperationCompleted == null)) {
                this.SystemCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSystemCheckOperationCompleted);
            }
            this.InvokeAsync("SystemCheck", new object[] {
                        StoreID,
                        StoreKey,
                        ApplicationID}, this.SystemCheckOperationCompleted, userState);
        }
        
        private void OnSystemCheckOperationCompleted(object arg) {
            if ((this.SystemCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SystemCheckCompleted(this, new SystemCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void QueryIdentityChekAuditSummaryCompletedEventHandler(object sender, QueryIdentityChekAuditSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryIdentityChekAuditSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryIdentityChekAuditSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ItemCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string QueryDataSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string QueryData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void QueryIdentityChekAuditRecordsCompletedEventHandler(object sender, QueryIdentityChekAuditRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryIdentityChekAuditRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryIdentityChekAuditRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ItemCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string QueryDataSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string QueryData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void QueryIdentityChekTransactionTotalsCompletedEventHandler(object sender, QueryIdentityChekTransactionTotalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryIdentityChekTransactionTotalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryIdentityChekTransactionTotalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ItemCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string QueryDataSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string QueryData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void QueryIdentityChekTransactionsCompletedEventHandler(object sender, QueryIdentityChekTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryIdentityChekTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryIdentityChekTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ItemCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string QueryDataSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string QueryData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void QueryBatchTotalsCompletedEventHandler(object sender, QueryBatchTotalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryBatchTotalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryBatchTotalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ItemCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string QueryDataSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string QueryData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void QueryBatchesCompletedEventHandler(object sender, QueryBatchesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryBatchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryBatchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ItemCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string QueryDataSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string QueryData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void QueryTransactionTotalsCompletedEventHandler(object sender, QueryTransactionTotalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryTransactionTotalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryTransactionTotalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ItemCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string QueryDataSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string QueryData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void QueryTransactionsCompletedEventHandler(object sender, QueryTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ItemCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string QueryDataSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string QueryData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetSettlementTotalsCompletedEventHandler(object sender, GetSettlementTotalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSettlementTotalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSettlementTotalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string SettledAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DetailedTotals {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetProcessorTotalsCompletedEventHandler(object sender, GetProcessorTotalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessorTotalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessorTotalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string ProcessedAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string DetailedTotals {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void TimeOutReversalCompletedEventHandler(object sender, TimeOutReversalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TimeOutReversalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TimeOutReversalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void VoidTransactionCompletedEventHandler(object sender, VoidTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VoidTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VoidTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void IdentityChekCompletedEventHandler(object sender, IdentityChekCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IdentityChekCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IdentityChekCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string InquiryNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string TaxIDNumberStartDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string TaxIDNumberEndDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string IdentificationStartDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string IdentificationEndDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string VerifyParameters {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string VerifyAlerts {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string ResendParameters {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string ResendTries {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
        
        /// <remarks/>
        public string MaxTriesExceeded {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[15]));
            }
        }
        
        /// <remarks/>
        public string WarningFlags {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[16]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void TeleCheckICARefundCompletedEventHandler(object sender, TeleCheckICARefundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeleCheckICARefundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeleCheckICARefundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void TeleCheckICASettleCompletedEventHandler(object sender, TeleCheckICASettleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeleCheckICASettleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeleCheckICASettleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void TeleCheckICAAuthorizeCompletedEventHandler(object sender, TeleCheckICAAuthorizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeleCheckICAAuthorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeleCheckICAAuthorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string ExtendedResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void TeleCheckRiskManagementCompletedEventHandler(object sender, TeleCheckRiskManagementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeleCheckRiskManagementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeleCheckRiskManagementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void STARChekDirectDebitCompletedEventHandler(object sender, STARChekDirectDebitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class STARChekDirectDebitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal STARChekDirectDebitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void STARChekDirectVerifyCompletedEventHandler(object sender, STARChekDirectVerifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class STARChekDirectVerifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal STARChekDirectVerifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void FIAccountVerificationCompletedEventHandler(object sender, FIAccountVerificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FIAccountVerificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FIAccountVerificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string NonParticipantFlag {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string AccountStatusCodes {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string AccountVerificationFlags {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void STARChekCompletedEventHandler(object sender, STARChekCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class STARChekCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal STARChekCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GiftCardDeactivateCompletedEventHandler(object sender, GiftCardDeactivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardDeactivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardDeactivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string BalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GiftCardActivateCompletedEventHandler(object sender, GiftCardActivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardActivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardActivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string BalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GiftCardBalanceIncreaseCompletedEventHandler(object sender, GiftCardBalanceIncreaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardBalanceIncreaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardBalanceIncreaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string BalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GiftCardBalanceInquiryCompletedEventHandler(object sender, GiftCardBalanceInquiryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardBalanceInquiryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardBalanceInquiryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string BalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GiftCardCreditCompletedEventHandler(object sender, GiftCardCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string BalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GiftCardRefundCompletedEventHandler(object sender, GiftCardRefundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardRefundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardRefundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string BalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GiftCardCaptureCompletedEventHandler(object sender, GiftCardCaptureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardCaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardCaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string BalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GiftCardSettleCompletedEventHandler(object sender, GiftCardSettleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardSettleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardSettleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string BalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GiftCardAuthorizeCompletedEventHandler(object sender, GiftCardAuthorizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardAuthorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardAuthorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string AuthorizationNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string BalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string ApprovedAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GiftCardChargeCompletedEventHandler(object sender, GiftCardChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string BalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void BenefitsBalanceInquiryCompletedEventHandler(object sender, BenefitsBalanceInquiryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BenefitsBalanceInquiryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BenefitsBalanceInquiryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string FoodStampBalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string CashBenefitBalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void CashBenefitChargeCompletedEventHandler(object sender, CashBenefitChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CashBenefitChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CashBenefitChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string FoodStampBalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string CashBenefitBalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void FoodStampVoucherCompletedEventHandler(object sender, FoodStampVoucherCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FoodStampVoucherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FoodStampVoucherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void FoodStampCreditCompletedEventHandler(object sender, FoodStampCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FoodStampCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FoodStampCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string FoodStampBalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string CashBenefitBalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void FoodStampChargeCompletedEventHandler(object sender, FoodStampChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FoodStampChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FoodStampChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string FoodStampBalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string CashBenefitBalanceAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void DebitSessionKeyChangeCompletedEventHandler(object sender, DebitSessionKeyChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DebitSessionKeyChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DebitSessionKeyChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string SessionKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void DebitCardCreditCompletedEventHandler(object sender, DebitCardCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DebitCardCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DebitCardCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string AuthorizationNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void DebitCardCaptureCompletedEventHandler(object sender, DebitCardCaptureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DebitCardCaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DebitCardCaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void DebitCardAuthorizeCompletedEventHandler(object sender, DebitCardAuthorizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DebitCardAuthorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DebitCardAuthorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string AuthorizationNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string ApprovedAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void DebitCardChargePINlessCompletedEventHandler(object sender, DebitCardChargePINlessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DebitCardChargePINlessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DebitCardChargePINlessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string AuthorizationNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void DebitCardChargeCompletedEventHandler(object sender, DebitCardChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DebitCardChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DebitCardChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string AuthorizationNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void CreditCardAddressVerifyCompletedEventHandler(object sender, CreditCardAddressVerifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditCardAddressVerifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditCardAddressVerifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string AVSResponseCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void ProcessAuthenticationResponseCompletedEventHandler(object sender, ProcessAuthenticationResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAuthenticationResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAuthenticationResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string AVSResponseCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string CVVResponseCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string AuthenticationResponseCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string AuthenticationMethodName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string AuthenticationMethodVersion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string AuthorizationNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string ReferenceNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string AccountNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string TransactionAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void CreditCardAuthorizeWithAuthenticationCompletedEventHandler(object sender, CreditCardAuthorizeWithAuthenticationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditCardAuthorizeWithAuthenticationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditCardAuthorizeWithAuthenticationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string AVSResponseCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string CVVResponseCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string AuthenticationResponseCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string AuthenticationMethodName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string AuthenticationMethodVersion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string AuthenticationRequestToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string AuthenticationServerURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string AuthorizationNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void CreditCardVoiceAuthorizeCompletedEventHandler(object sender, CreditCardVoiceAuthorizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditCardVoiceAuthorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditCardVoiceAuthorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void CreditCardCreditCompletedEventHandler(object sender, CreditCardCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditCardCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditCardCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void CreditCardRefundCompletedEventHandler(object sender, CreditCardRefundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditCardRefundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditCardRefundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void CreditCardCaptureCompletedEventHandler(object sender, CreditCardCaptureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditCardCaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditCardCaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void CreditCardSettleCompletedEventHandler(object sender, CreditCardSettleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditCardSettleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditCardSettleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void CreditCardChargeCompletedEventHandler(object sender, CreditCardChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditCardChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditCardChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string AVSResponseCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string CVVResponseCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string AuthorizationNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void CreditCardAuthorizeCompletedEventHandler(object sender, CreditCardAuthorizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditCardAuthorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditCardAuthorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string AVSResponseCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string CVVResponseCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string ApprovalNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string AuthorizationNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string TransactionDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string TransactionTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void RequestPassThroughCompletedEventHandler(object sender, RequestPassThroughCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestPassThroughCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestPassThroughCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ReplyMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void SystemCheckCompletedEventHandler(object sender, SystemCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SystemCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SystemCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591