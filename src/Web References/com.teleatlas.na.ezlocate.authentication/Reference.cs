//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2407
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2407.
// 
namespace Spring2.Core.com.teleatlas.na.ezlocate.authentication {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AuthenticationBinding", Namespace="http://ezlocate.na.teleatlas.com/Authentication.wsdl")]
    public class Authentication : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public Authentication() {
            this.Url = "http://mmezl.teleatlas.com/axis/services/Authentication";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Authentication:AuthenticationPortType#requestChallenge", RequestNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", ResponseNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultCode", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int requestChallenge([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string userName, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int minutesValid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] out int encryptedID) {
            object[] results = this.Invoke("requestChallenge", new object[] {
                        userName,
                        minutesValid});
            encryptedID = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginrequestChallenge(string userName, int minutesValid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("requestChallenge", new object[] {
                        userName,
                        minutesValid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndrequestChallenge(System.IAsyncResult asyncResult, out int encryptedID) {
            object[] results = this.EndInvoke(asyncResult);
            encryptedID = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Authentication:AuthenticationPortType#answerChallenge", RequestNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", ResponseNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultCode", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int answerChallenge([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int encryptedResponse, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int originalChallenge, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] out int credential) {
            object[] results = this.Invoke("answerChallenge", new object[] {
                        encryptedResponse,
                        originalChallenge});
            credential = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginanswerChallenge(int encryptedResponse, int originalChallenge, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("answerChallenge", new object[] {
                        encryptedResponse,
                        originalChallenge}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndanswerChallenge(System.IAsyncResult asyncResult, out int credential) {
            object[] results = this.EndInvoke(asyncResult);
            credential = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Authentication:AuthenticationPortType#invalidateCredential", RequestNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", ResponseNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultCode", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int invalidateCredential([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int credential) {
            object[] results = this.Invoke("invalidateCredential", new object[] {
                        credential});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegininvalidateCredential(int credential, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("invalidateCredential", new object[] {
                        credential}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndinvalidateCredential(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Authentication:AuthenticationPortType#testCredential", RequestNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", ResponseNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultCode", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int testCredential([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string ipAddress, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int credential, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int serverCred, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] out string user, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] out string password, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] out long expiration) {
            object[] results = this.Invoke("testCredential", new object[] {
                        ipAddress,
                        credential,
                        serverCred});
            user = ((string)(results[1]));
            password = ((string)(results[2]));
            expiration = ((long)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegintestCredential(string ipAddress, int credential, int serverCred, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("testCredential", new object[] {
                        ipAddress,
                        credential,
                        serverCred}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndtestCredential(System.IAsyncResult asyncResult, out string user, out string password, out long expiration) {
            object[] results = this.EndInvoke(asyncResult);
            user = ((string)(results[1]));
            password = ((string)(results[2]));
            expiration = ((long)(results[3]));
            return ((int)(results[0]));
        }
    }
}
