//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1826
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1826.
// 
#pragma warning disable 1591

namespace Spring2.Core.com.teleatlas.na.ezlocate.authentication {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AuthenticationBinding", Namespace="http://ezlocate.na.teleatlas.com/Authentication.wsdl")]
    public partial class Authentication : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback requestChallengeOperationCompleted;
        
        private System.Threading.SendOrPostCallback answerChallengeOperationCompleted;
        
        private System.Threading.SendOrPostCallback invalidateCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback testCredentialOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Authentication() {
            this.Url = "http://mmezl.teleatlas.com/axis/services/Authentication";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event requestChallengeCompletedEventHandler requestChallengeCompleted;
        
        /// <remarks/>
        public event answerChallengeCompletedEventHandler answerChallengeCompleted;
        
        /// <remarks/>
        public event invalidateCredentialCompletedEventHandler invalidateCredentialCompleted;
        
        /// <remarks/>
        public event testCredentialCompletedEventHandler testCredentialCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Authentication:AuthenticationPortType#requestChallenge", RequestNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", ResponseNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultCode", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int requestChallenge([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string userName, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int minutesValid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] out int encryptedID) {
            object[] results = this.Invoke("requestChallenge", new object[] {
                        userName,
                        minutesValid});
            encryptedID = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginrequestChallenge(string userName, int minutesValid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("requestChallenge", new object[] {
                        userName,
                        minutesValid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndrequestChallenge(System.IAsyncResult asyncResult, out int encryptedID) {
            object[] results = this.EndInvoke(asyncResult);
            encryptedID = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void requestChallengeAsync(string userName, int minutesValid) {
            this.requestChallengeAsync(userName, minutesValid, null);
        }
        
        /// <remarks/>
        public void requestChallengeAsync(string userName, int minutesValid, object userState) {
            if ((this.requestChallengeOperationCompleted == null)) {
                this.requestChallengeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrequestChallengeOperationCompleted);
            }
            this.InvokeAsync("requestChallenge", new object[] {
                        userName,
                        minutesValid}, this.requestChallengeOperationCompleted, userState);
        }
        
        private void OnrequestChallengeOperationCompleted(object arg) {
            if ((this.requestChallengeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.requestChallengeCompleted(this, new requestChallengeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Authentication:AuthenticationPortType#answerChallenge", RequestNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", ResponseNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultCode", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int answerChallenge([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int encryptedResponse, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int originalChallenge, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] out int credential) {
            object[] results = this.Invoke("answerChallenge", new object[] {
                        encryptedResponse,
                        originalChallenge});
            credential = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginanswerChallenge(int encryptedResponse, int originalChallenge, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("answerChallenge", new object[] {
                        encryptedResponse,
                        originalChallenge}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndanswerChallenge(System.IAsyncResult asyncResult, out int credential) {
            object[] results = this.EndInvoke(asyncResult);
            credential = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void answerChallengeAsync(int encryptedResponse, int originalChallenge) {
            this.answerChallengeAsync(encryptedResponse, originalChallenge, null);
        }
        
        /// <remarks/>
        public void answerChallengeAsync(int encryptedResponse, int originalChallenge, object userState) {
            if ((this.answerChallengeOperationCompleted == null)) {
                this.answerChallengeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnanswerChallengeOperationCompleted);
            }
            this.InvokeAsync("answerChallenge", new object[] {
                        encryptedResponse,
                        originalChallenge}, this.answerChallengeOperationCompleted, userState);
        }
        
        private void OnanswerChallengeOperationCompleted(object arg) {
            if ((this.answerChallengeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.answerChallengeCompleted(this, new answerChallengeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Authentication:AuthenticationPortType#invalidateCredential", RequestNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", ResponseNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultCode", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int invalidateCredential([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int credential) {
            object[] results = this.Invoke("invalidateCredential", new object[] {
                        credential});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegininvalidateCredential(int credential, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("invalidateCredential", new object[] {
                        credential}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndinvalidateCredential(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void invalidateCredentialAsync(int credential) {
            this.invalidateCredentialAsync(credential, null);
        }
        
        /// <remarks/>
        public void invalidateCredentialAsync(int credential, object userState) {
            if ((this.invalidateCredentialOperationCompleted == null)) {
                this.invalidateCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OninvalidateCredentialOperationCompleted);
            }
            this.InvokeAsync("invalidateCredential", new object[] {
                        credential}, this.invalidateCredentialOperationCompleted, userState);
        }
        
        private void OninvalidateCredentialOperationCompleted(object arg) {
            if ((this.invalidateCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invalidateCredentialCompleted(this, new invalidateCredentialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Authentication:AuthenticationPortType#testCredential", RequestNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", ResponseNamespace="http://ezlocate.na.teleatlas.com/Authentication.xsd1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("resultCode", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int testCredential([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string ipAddress, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int credential, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int serverCred, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] out string user, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] out string password, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] out long expiration) {
            object[] results = this.Invoke("testCredential", new object[] {
                        ipAddress,
                        credential,
                        serverCred});
            user = ((string)(results[1]));
            password = ((string)(results[2]));
            expiration = ((long)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegintestCredential(string ipAddress, int credential, int serverCred, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("testCredential", new object[] {
                        ipAddress,
                        credential,
                        serverCred}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndtestCredential(System.IAsyncResult asyncResult, out string user, out string password, out long expiration) {
            object[] results = this.EndInvoke(asyncResult);
            user = ((string)(results[1]));
            password = ((string)(results[2]));
            expiration = ((long)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void testCredentialAsync(string ipAddress, int credential, int serverCred) {
            this.testCredentialAsync(ipAddress, credential, serverCred, null);
        }
        
        /// <remarks/>
        public void testCredentialAsync(string ipAddress, int credential, int serverCred, object userState) {
            if ((this.testCredentialOperationCompleted == null)) {
                this.testCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OntestCredentialOperationCompleted);
            }
            this.InvokeAsync("testCredential", new object[] {
                        ipAddress,
                        credential,
                        serverCred}, this.testCredentialOperationCompleted, userState);
        }
        
        private void OntestCredentialOperationCompleted(object arg) {
            if ((this.testCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.testCredentialCompleted(this, new testCredentialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void requestChallengeCompletedEventHandler(object sender, requestChallengeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class requestChallengeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal requestChallengeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int encryptedID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void answerChallengeCompletedEventHandler(object sender, answerChallengeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class answerChallengeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal answerChallengeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int credential {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void invalidateCredentialCompletedEventHandler(object sender, invalidateCredentialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class invalidateCredentialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal invalidateCredentialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void testCredentialCompletedEventHandler(object sender, testCredentialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class testCredentialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal testCredentialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string user {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public long expiration {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[3]));
            }
        }
    }
}

#pragma warning restore 1591